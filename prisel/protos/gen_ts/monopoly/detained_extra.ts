// @generated by protobuf-ts 1.0.12 with parameters disable_service_client
// @generated from protobuf file "monopoly/detained_extra.proto" (package "monopoly", syntax proto3)
// tslint:disable
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message monopoly.DetainedExtra
 */
export interface DetainedExtra {
    /**
     * @generated from protobuf field: monopoly.DetainedExtra.Type type = 1;
     */
    type: DetainedExtra_Type;
    /**
     * How long show the player stay.
     *
     * @generated from protobuf field: int32 length = 3;
     */
    length: number;
}
/**
 * @generated from protobuf enum monopoly.DetainedExtra.Type
 */
export enum DetainedExtra_Type {
    /**
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: ARRESTED = 1;
     */
    ARRESTED = 1,
    /**
     * @generated from protobuf enum value: HOSPITALIZED = 2;
     */
    HOSPITALIZED = 2
}
/**
 * Type for protobuf message monopoly.DetainedExtra
 */
class DetainedExtra$Type extends MessageType<DetainedExtra> {
    constructor() {
        super("monopoly.DetainedExtra", [
            { no: 1, name: "type", kind: "enum", T: () => ["monopoly.DetainedExtra.Type", DetainedExtra_Type] },
            { no: 3, name: "length", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DetainedExtra>): DetainedExtra {
        const message = { type: 0, length: 0 };
        if (value !== undefined)
            reflectionMergePartial<DetainedExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetainedExtra): DetainedExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* monopoly.DetainedExtra.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* int32 length */ 3:
                    message.length = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DetainedExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* monopoly.DetainedExtra.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* int32 length = 3; */
        if (message.length !== 0)
            writer.tag(3, WireType.Varint).int32(message.length);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const DetainedExtra = new DetainedExtra$Type();
