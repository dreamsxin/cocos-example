// @generated by protobuf-ts 1.0.12 with parameters disable_service_client
// @generated from protobuf file "monopoly/collectible_extra.proto" (package "monopoly", syntax proto3)
// tslint:disable
import { BinaryWriteOptions } from "@protobuf-ts/runtime";
import { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import { BinaryReadOptions } from "@protobuf-ts/runtime";
import { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * add a card to collection. For example: Get out of jail free card
 *
 * @generated from protobuf message monopoly.CollectibleExtra
 */
export interface CollectibleExtra {
    /**
     * @generated from protobuf field: monopoly.CollectibleExtra.CollectibleType type = 1;
     */
    type: CollectibleExtra_CollectibleType;
}
/**
 * @generated from protobuf enum monopoly.CollectibleExtra.CollectibleType
 */
export enum CollectibleExtra_CollectibleType {
    /**
     * @generated from protobuf enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: GET_OUT_OF_JAIL_FREE = 1;
     */
    GET_OUT_OF_JAIL_FREE = 1
}
/**
 * Type for protobuf message monopoly.CollectibleExtra
 */
class CollectibleExtra$Type extends MessageType<CollectibleExtra> {
    constructor() {
        super("monopoly.CollectibleExtra", [
            { no: 1, name: "type", kind: "enum", T: () => ["monopoly.CollectibleExtra.CollectibleType", CollectibleExtra_CollectibleType] }
        ]);
    }
    create(value?: PartialMessage<CollectibleExtra>): CollectibleExtra {
        const message = { type: 0 };
        if (value !== undefined)
            reflectionMergePartial<CollectibleExtra>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CollectibleExtra): CollectibleExtra {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* monopoly.CollectibleExtra.CollectibleType type */ 1:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CollectibleExtra, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* monopoly.CollectibleExtra.CollectibleType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
export const CollectibleExtra = new CollectibleExtra$Type();
