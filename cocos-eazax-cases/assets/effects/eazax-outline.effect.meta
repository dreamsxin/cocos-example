{
  "ver": "1.0.27",
  "uuid": "8136930a-a6bf-46a9-99e3-9c86db1585cd",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_uv0;\nattribute vec4 a_color;\nvarying vec2 v_uv0;\nvarying vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}",
        "frag": "\nprecision highp float;\nvarying vec2 v_uv0;\nvarying vec4 v_color;\nuniform sampler2D texture;\nuniform vec4 outlineColor;\nuniform vec2 size;\nvoid main () {\n  vec4 color = v_color;\n  color *= texture2D(texture, v_uv0);\n  const float OUTLINE_WIDTH = 2.0;\n  float sampledAlpha = 0.0;\n  for (float i = 0.0; i < OUTLINE_WIDTH; i++) {\n    sampledAlpha =\n      texture2D(texture, v_uv0 + vec2(0.0, (1.0 + i) / size.y)).a *\n      texture2D(texture, v_uv0 + vec2(0.0, (-1.0 - i) / size.y)).a *\n      texture2D(texture, v_uv0 + vec2((-1.0 - i) / size.x, 0.0)).a *\n      texture2D(texture, v_uv0 + vec2((1.0 + i) / size.x, 0.0)).a;\n    if (sampledAlpha > 1.0) {\n      break;\n    }\n  }\n  color.rgb = mix(outlineColor.rgb, color.rgb, sampledAlpha);\n  gl_FragColor = color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec3 a_position;\nin vec2 a_uv0;\nin vec4 a_color;\nout vec2 v_uv0;\nout vec4 v_color;\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_uv0 = a_uv0;\n  v_color = a_color;\n}",
        "frag": "\nprecision highp float;\nin vec2 v_uv0;\nin vec4 v_color;\nuniform sampler2D texture;\nuniform Properties {\n  vec4 outlineColor;\n  vec2 size;\n};\nvoid main () {\n  vec4 color = v_color;\n  color *= texture(texture, v_uv0);\n  const float OUTLINE_WIDTH = 2.0;\n  float sampledAlpha = 0.0;\n  for (float i = 0.0; i < OUTLINE_WIDTH; i++) {\n    sampledAlpha =\n      texture(texture, v_uv0 + vec2(0.0, (1.0 + i) / size.y)).a *\n      texture(texture, v_uv0 + vec2(0.0, (-1.0 - i) / size.y)).a *\n      texture(texture, v_uv0 + vec2((-1.0 - i) / size.x, 0.0)).a *\n      texture(texture, v_uv0 + vec2((1.0 + i) / size.x, 0.0)).a;\n    if (sampledAlpha > 1.0) {\n      break;\n    }\n  }\n  color.rgb = mix(outlineColor.rgb, color.rgb, sampledAlpha);\n  gl_FragColor = color;\n}"
      }
    }
  ],
  "subMetas": {}
}