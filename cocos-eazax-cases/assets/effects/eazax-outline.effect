// Eazax-CCC 外描边 1.0.0.20200604

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        size: { value: [500.0, 500.0], editor: { tooltip: '节点尺寸' } }
        outlineColor: { value: [1.0, 0.0, 0.0, 1], editor: { type: color, tooltip: '描边颜色' } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>

  in vec3 a_position;
  in vec2 a_uv0;
  in vec4 a_color;

  out vec2 v_uv0;
  out vec4 v_color;

  void main () {
    gl_Position = cc_matViewProj * vec4(a_position, 1);
    v_uv0 = a_uv0;
    v_color = a_color;
  }
}%


CCProgram fs %{
  precision highp float;

  in vec2 v_uv0;
  in vec4 v_color;

  uniform sampler2D texture;
  uniform Properties {
    vec4 outlineColor;
    vec2 size;
  };

  void main () {
    vec4 color = v_color;
    color *= texture(texture, v_uv0);
    
    // 描边宽度
    const float OUTLINE_WIDTH = 2.0;

    float sampledAlpha = 0.0;
    for (float i = 0.0; i < OUTLINE_WIDTH; i++) {
      sampledAlpha = 
        texture(texture, v_uv0 + vec2(0.0, (1.0 + i) / size.y)).a *
        texture(texture, v_uv0 + vec2(0.0, (-1.0 - i) / size.y)).a *
        texture(texture, v_uv0 + vec2((-1.0 - i) / size.x, 0.0)).a *
        texture(texture, v_uv0 + vec2((1.0 + i) / size.x, 0.0)).a;
      if (sampledAlpha > 1.0) {
        break;
      }
    }
    color.rgb = mix(outlineColor.rgb, color.rgb, sampledAlpha);

    gl_FragColor = color;
  }
}%
