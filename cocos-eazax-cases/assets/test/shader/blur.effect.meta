{
  "ver": "1.0.27",
  "uuid": "c473fbfd-2f9d-4782-911a-20a55d7a7c01",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nvec3 draw (vec2 uv) {\n  return texture2D(texture, uv).rgb;\n}\nfloat rand (vec2 co) {\n  return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\nvoid main () {\n  float time = cc_time.x;\n  float bluramount = sin(time) * 0.1;\n  vec2 uv = v_uv0;\n  vec3 color = vec3(0.0);\n  const float repeats = 60.0;\n  for (float i = 0.0; i < repeats; i++) {\n      vec2 q = vec2(cos(degrees((i / repeats) * 360.0)), sin(degrees((i / repeats) * 360.0))) * (rand(vec2(i, uv.x + uv.y)) + bluramount);\n      vec2 uv2 = uv + (q * bluramount);\n      color += draw(uv2) / 2.0;\n      q = vec2(cos(degrees((i / repeats) * 360.0)), sin(degrees((i / repeats) * 360.0))) * (rand(vec2(i + 2.0, uv.x + uv.y + 24.0)) + bluramount);\n      uv2 = uv + (q * bluramount);\n      color += draw(uv2) / 2.0;\n  }\n  color /= repeats;\n  gl_FragColor = vec4(color, v_color.a);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform Properties {\n  vec2 size;\n};\nvec3 draw (vec2 uv) {\n  return texture2D(texture, uv).rgb;\n}\nfloat rand (vec2 co) {\n  return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\nvoid main () {\n  float time = cc_time.x;\n  float bluramount = sin(time) * 0.1;\n  vec2 uv = v_uv0;\n  vec3 color = vec3(0.0);\n  const float repeats = 60.0;\n  for (float i = 0.0; i < repeats; i++) {\n      vec2 q = vec2(cos(degrees((i / repeats) * 360.0)), sin(degrees((i / repeats) * 360.0))) * (rand(vec2(i, uv.x + uv.y)) + bluramount);\n      vec2 uv2 = uv + (q * bluramount);\n      color += draw(uv2) / 2.0;\n      q = vec2(cos(degrees((i / repeats) * 360.0)), sin(degrees((i / repeats) * 360.0))) * (rand(vec2(i + 2.0, uv.x + uv.y + 24.0)) + bluramount);\n      uv2 = uv + (q * bluramount);\n      color += draw(uv2) / 2.0;\n  }\n  color /= repeats;\n  gl_FragColor = vec4(color, v_color.a);\n}"
      }
    }
  ],
  "subMetas": {}
}