// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        size: { value: [500.0, 500.0], editor: { tooltip: '节点尺寸' } }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  in vec2 a_uv0;
  out vec2 v_uv0;

  void main () {
    vec4 pos = vec4(a_position, 1);

    pos = cc_matViewProj * cc_matWorld * pos;

    v_uv0 = a_uv0;

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <texture>
  #include <cc-global>

  in vec4 v_color;

  in vec2 v_uv0;
  uniform sampler2D texture;

  uniform Properties {
    vec2 size;
  };

  vec3 draw (vec2 uv) {
    return texture2D(texture, uv).rgb;
  }

  float rand (vec2 co) {
    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
  }

  void main () {
    float time = cc_time.x;
    // float time = 0.5;
    float bluramount = sin(time) * 0.1;

    vec2 uv = v_uv0;
    vec3 color = vec3(0.0);
    
    const float repeats = 60.0;
    for (float i = 0.0; i < repeats; i++) { 
        vec2 q = vec2(cos(degrees((i / repeats) * 360.0)), sin(degrees((i / repeats) * 360.0))) * (rand(vec2(i, uv.x + uv.y)) + bluramount); 
        vec2 uv2 = uv + (q * bluramount);
        color += draw(uv2) / 2.0;

        //One more to hide the noise.
        q = vec2(cos(degrees((i / repeats) * 360.0)), sin(degrees((i / repeats) * 360.0))) * (rand(vec2(i + 2.0, uv.x + uv.y + 24.0)) + bluramount); 
        uv2 = uv + (q * bluramount);
        color += draw(uv2) / 2.0;
    }
    color /= repeats;
        
    gl_FragColor = vec4(color, v_color.a);
  }
}%
