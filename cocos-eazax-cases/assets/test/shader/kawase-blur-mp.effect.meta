{
  "ver": "1.0.27",
  "uuid": "f6d37d8b-4a5a-40a6-a4df-16e2113ff8a1",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 nodeSize;\nuniform float pixelOffset;\nvec4 kawaseBlur(sampler2D texture, vec2 uv, float pixelOffset) {\n  vec4 color = vec4(0);\n  vec2 offset = (vec2(pixelOffset) + 0.5) / nodeSize;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  offset.x = -offset.x;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  return color * 0.25;\n}\nvec4 pass0 () {\n  vec4 color = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    color = kawaseBlur(texture, v_uv0, pixelOffset);\n  #endif\n  return color;\n}\nvoid main() { gl_FragColor = pass0(); }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Properties {\n  vec2 nodeSize;\n  float pixelOffset;\n};\nvec4 kawaseBlur(sampler2D texture, vec2 uv, float pixelOffset) {\n  vec4 color = vec4(0);\n  vec2 offset = (vec2(pixelOffset) + 0.5) / nodeSize;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  offset.x = -offset.x;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  return color * 0.25;\n}\nvec4 pass0 () {\n  vec4 color = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    color = kawaseBlur(texture, v_uv0, pixelOffset);\n  #endif\n  return color;\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = pass0(); }"
      }
    },
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 nodeSize;\nuniform float pixelOffset;\nvec4 kawaseBlur(sampler2D texture, vec2 uv, float pixelOffset) {\n  vec4 color = vec4(0);\n  vec2 offset = (vec2(pixelOffset) + 0.5) / nodeSize;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  offset.x = -offset.x;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  return color * 0.25;\n}\nvec4 pass1 () {\n  vec4 color = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    color = kawaseBlur(texture, v_uv0, pixelOffset);\n  #endif\n  return color;\n}\nvoid main() { gl_FragColor = pass1(); }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Properties {\n  vec2 nodeSize;\n  float pixelOffset;\n};\nvec4 kawaseBlur(sampler2D texture, vec2 uv, float pixelOffset) {\n  vec4 color = vec4(0);\n  vec2 offset = (vec2(pixelOffset) + 0.5) / nodeSize;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  offset.x = -offset.x;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  return color * 0.25;\n}\nvec4 pass1 () {\n  vec4 color = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    color = kawaseBlur(texture, v_uv0, pixelOffset);\n  #endif\n  return color;\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = pass1(); }"
      }
    },
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 nodeSize;\nuniform float pixelOffset;\nvec4 kawaseBlur(sampler2D texture, vec2 uv, float pixelOffset) {\n  vec4 color = vec4(0);\n  vec2 offset = (vec2(pixelOffset) + 0.5) / nodeSize;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  offset.x = -offset.x;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  return color * 0.25;\n}\nvec4 pass2 () {\n  vec4 color = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    color = kawaseBlur(texture, v_uv0, pixelOffset);\n  #endif\n  return color;\n}\nvoid main() { gl_FragColor = pass2(); }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Properties {\n  vec2 nodeSize;\n  float pixelOffset;\n};\nvec4 kawaseBlur(sampler2D texture, vec2 uv, float pixelOffset) {\n  vec4 color = vec4(0);\n  vec2 offset = (vec2(pixelOffset) + 0.5) / nodeSize;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  offset.x = -offset.x;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  return color * 0.25;\n}\nvec4 pass2 () {\n  vec4 color = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    color = kawaseBlur(texture, v_uv0, pixelOffset);\n  #endif\n  return color;\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = pass2(); }"
      }
    },
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 nodeSize;\nuniform float pixelOffset;\nvec4 kawaseBlur(sampler2D texture, vec2 uv, float pixelOffset) {\n  vec4 color = vec4(0);\n  vec2 offset = (vec2(pixelOffset) + 0.5) / nodeSize;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  offset.x = -offset.x;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  return color * 0.25;\n}\nvec4 pass3 () {\n  vec4 color = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    color = kawaseBlur(texture, v_uv0, pixelOffset);\n  #endif\n  color *= v_color;\n  ALPHA_TEST(color);\n  return color;\n}\nvoid main() { gl_FragColor = pass3(); }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Properties {\n  vec2 nodeSize;\n  float pixelOffset;\n};\nvec4 kawaseBlur(sampler2D texture, vec2 uv, float pixelOffset) {\n  vec4 color = vec4(0);\n  vec2 offset = (vec2(pixelOffset) + 0.5) / nodeSize;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  offset.x = -offset.x;\n  color += texture2D(texture, uv + offset);\n  color += texture2D(texture,  uv - offset);\n  return color * 0.25;\n}\nvec4 pass3 () {\n  vec4 color = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    color = kawaseBlur(texture, v_uv0, pixelOffset);\n  #endif\n  color *= v_color;\n  ALPHA_TEST(color);\n  return color;\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = pass3(); }"
      }
    }
  ],
  "subMetas": {}
}