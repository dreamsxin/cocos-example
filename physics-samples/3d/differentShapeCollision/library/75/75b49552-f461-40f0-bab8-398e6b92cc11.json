{
  "__type__": "cc.EffectAsset",
  "_name": "builtin-effect-pbr-transparent",
  "_objFlags": 0,
  "_native": "",
  "techniques": [
    {
      "queue": 1,
      "lod": 500,
      "passes": [
        {
          "stage": 2,
          "cullMode": 1029,
          "depthTest": true,
          "depthWrite": false,
          "blend": true,
          "blendEq": 32774,
          "blendSrc": 770,
          "blendDst": 771,
          "blendAlphaEq": 32774,
          "blendSrcAlpha": 1,
          "blendDstAlpha": 771,
          "program": "3bbb17eee42820308fa22885ad5c1334c2c9f410e1ae02576fa19b69"
        },
        {
          "stage": 4,
          "cullMode": 1029,
          "blendMode": 0,
          "depthTest": true,
          "depthWrite": true,
          "program": "81c5df70cfe5dbdf610be1720c37d54f5081aad5fb15b296b203fdb8"
        }
      ],
      "priority": 0
    }
  ],
  "properties": {
    "albedo": {
      "type": 9,
      "value": [
        1,
        1,
        1,
        1
      ]
    },
    "mainTiling": {
      "type": 5,
      "value": [
        1,
        1
      ]
    },
    "mainOffset": {
      "type": 5,
      "value": [
        0,
        0
      ]
    },
    "albedo_texture": {
      "type": 13,
      "value": null
    },
    "metallic": {
      "type": 4,
      "value": 0.5
    },
    "metallic_texture": {
      "type": 13,
      "value": null
    },
    "roughness": {
      "type": 4,
      "value": 0.7
    },
    "roughness_texture": {
      "type": 13,
      "value": null
    },
    "ao": {
      "type": 4,
      "value": 0.2
    },
    "ao_texture": {
      "type": 13,
      "value": null
    },
    "mra_texture": {
      "type": 13,
      "value": null
    },
    "emissive": {
      "type": 8,
      "value": [
        0,
        0,
        0
      ]
    },
    "emissive_texture": {
      "type": 13,
      "value": null
    },
    "normal_texture": {
      "type": 13,
      "value": null
    },
    "diffuseEnvTexture": {
      "type": 14,
      "value": null
    },
    "specularEnvTexture": {
      "type": 14,
      "value": null
    },
    "brdfLUT": {
      "type": 13,
      "value": null
    },
    "maxReflectionLod": {
      "type": 4,
      "value": 9
    },
    "alphaTestThreshold": {
      "type": 4,
      "value": 0
    }
  },
  "shaders": [
    {
      "vert": "\n\nattribute vec3 a_position;\nattribute vec3 a_normal;\n\nvarying vec3 pos_w;\nvarying vec3 normal_w;\n\nuniform mat4 _model;\nuniform mat4 _viewProj;\nuniform mat3 _normalMatrix;\n\n#if USE_ALBEDO_TEXTURE || USE_NORMAL_TEXTURE || USE_MRA_TEXTURE || USE_METALLIC_TEXTURE || USE_ROUGHNESS_TEXTURE || USE_AO_TEXTURE || USE_MRA_TEXTURE || USE_EMISSIVE_TEXTURE\n  attribute vec2 a_uv0;\n  uniform vec2 mainTiling;\n  uniform vec2 mainOffset;\n  varying vec2 uv0;\n#endif\n\n#if _USE_SKINNING\n  \n\nattribute vec4 a_weights;\nattribute vec4 a_joints;\n\n#if _USE_JOINTS_TEXTURE\nuniform sampler2D _u_jointsTexture;\nuniform float _u_jointsTextureSize;\n\nmat4 getBoneMatrix(const in float i) {\n  float size = _u_jointsTextureSize;\n  float j = i * 4.0;\n  float x = mod(j, size);\n  float y = floor(j / size);\n\n  float dx = 1.0 / size;\n  float dy = 1.0 / size;\n\n  y = dy * (y + 0.5);\n\n  vec4 v1 = texture2D(_u_jointsTexture, vec2(dx * (x + 0.5), y));\n  vec4 v2 = texture2D(_u_jointsTexture, vec2(dx * (x + 1.5), y));\n  vec4 v3 = texture2D(_u_jointsTexture, vec2(dx * (x + 2.5), y));\n  vec4 v4 = texture2D(_u_jointsTexture, vec2(dx * (x + 3.5), y));\n\n  return mat4(v1, v2, v3, v4);\n}\n#else\nuniform mat4 _u_jointMatrices[128];\n\nmat4 getBoneMatrix(const in float i) {\n  return _u_jointMatrices[int(i)];\n}\n#endif\n\nmat4 skinMatrix() {\n  return\n    getBoneMatrix(a_joints.x) * a_weights.x +\n    getBoneMatrix(a_joints.y) * a_weights.y +\n    getBoneMatrix(a_joints.z) * a_weights.z +\n    getBoneMatrix(a_joints.w) * a_weights.w\n    ;\n}\n\nvoid skinVertex(inout vec4 a1) {\n  mat4 m = skinMatrix();\n  a1 = m * a1;\n}\n\nvoid skinVertex(inout vec4 a1, inout vec4 a2) {\n  mat4 m = skinMatrix();\n  a1 = m * a1;\n  a2 = m * a2;\n}\n\nvoid skinVertex(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  mat4 m = skinMatrix();\n  a1 = m * a1;\n  a2 = m * a2;\n  a3 = m * a3;\n}\n\n#endif\n\n#if _USE_SHADOW_MAP\n  \n\n#if _NUM_SHADOW_LIGHTS > 0\n  #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n    uniform mat4 _lightViewProjMatrix_{id};\n    uniform float _minDepth_{id};\n    uniform float _maxDepth_{id};\n    varying vec4 pos_lightspace_{id};\n    varying float vDepth_{id};\n  #pragma endFor\n#endif\n\nvoid prepareShadowData(vec3 pos_w) {\n  #if _NUM_SHADOW_LIGHTS > 0\n    #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n      pos_lightspace_{id} = _lightViewProjMatrix_{id} * vec4(pos_w, 1.0);\n      vDepth_{id} = (pos_lightspace_{id}.z + _minDepth_{id}) / (_minDepth_{id} + _maxDepth_{id});\n    #pragma endFor\n  #endif\n}\n\n#endif\n\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  vec4 normal = vec4(a_normal, 0);\n\n  #if _USE_SKINNING\n    skinVertex(pos, normal);\n  #endif\n\n  pos_w = (_model * pos).xyz;\n  pos = _viewProj * _model * pos;\n  normal_w = _normalMatrix * normal.xyz;\n\n  #if USE_ALBEDO_TEXTURE || USE_NORMAL_TEXTURE || USE_MRA_TEXTURE || USE_METALLIC_TEXTURE || USE_ROUGHNESS_TEXTURE || USE_AO_TEXTURE || USE_MRA_TEXTURE || USE_EMISSIVE_TEXTURE\n    uv0 = a_uv0 * mainTiling + mainOffset;\n  #endif\n\n  #if _USE_SHADOW_MAP\n    prepareShadowData(pos_w);\n  #endif\n\n  return pos;\n}\n\nvoid main() { gl_Position = vert(); }\n",
      "frag": "\n\n#if USE_NORMAL_TEXTURE\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#if USE_TEX_LOD\n#extension GL_EXT_shader_texture_lod: enable\n#endif\n\n\n\n\n\n\n#define PI 3.14159265359\n#define PI2 6.28318530718\n#define EPSILON 1e-6\n#define LOG2 1.442695\n\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n\n\n\n\nvec3 gammaToLinearSpaceRGB(vec3 sRGB) { \n  return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n}\n\nvec3 linearToGammaSpaceRGB(vec3 RGB) { \n  vec3 S1 = sqrt(RGB);\n  vec3 S2 = sqrt(S1);\n  vec3 S3 = sqrt(S2);\n  return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\n\nvec4 gammaToLinearSpaceRGBA(vec4 sRGBA) {\n  return vec4(gammaToLinearSpaceRGB(sRGBA.rgb), sRGBA.a);\n}\n\nvec4 linearToGammaSpaceRGBA(vec4 RGBA) {\n  return vec4(linearToGammaSpaceRGB(RGBA.rgb), RGBA.a);\n}\n\n\nfloat gammaToLinearSpaceExact(float val) {\n  if (val <= 0.04045) {\n    return val / 12.92;\n  } else if (val < 1.0) {\n    return pow((val + 0.055) / 1.055, 2.4);\n  } else {\n    return pow(val, 2.2);\n  }\n}\n\nfloat linearToGammaSpaceExact(float val) {\n  if (val <= 0.0) {\n    return 0.0;\n  } else if (val <= 0.0031308) {\n    return 12.92 * val;\n  } else if (val < 1.0) {\n    return 1.055 * pow(val, 0.4166667) - 0.055;\n  } else {\n    return pow(val, 0.45454545);\n  }\n}\n\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n};\n\n#if _NUM_DIR_LIGHTS > 0\n  #pragma for id in range(0, _NUM_DIR_LIGHTS)\n    uniform vec3 _dir_light{id}_direction;\n    uniform vec3 _dir_light{id}_color;\n  #pragma endFor\n#endif\n\n#if _NUM_POINT_LIGHTS > 0\n  #pragma for id in range(0, _NUM_POINT_LIGHTS)\n    uniform vec3 _point_light{id}_position;\n    uniform vec3 _point_light{id}_color;\n    uniform float _point_light{id}_range;\n  #pragma endFor\n#endif\n\n#if _NUM_SPOT_LIGHTS > 0\n  #pragma for id in range(0, _NUM_SPOT_LIGHTS)\n    uniform vec3 _spot_light{id}_position;\n    uniform vec3 _spot_light{id}_direction;\n    uniform vec3 _spot_light{id}_color;\n    uniform vec2 _spot_light{id}_spot;\n    uniform float _spot_light{id}_range;\n  #pragma endFor\n#endif\n\n\nLightInfo computeDirectionalLighting(\n  vec3 lightDirection,\n  vec3 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection);\n  ret.radiance = lightColor;\n\n  return ret;\n}\n\n\nLightInfo computePointLighting(\n  vec3 lightPosition,\n  vec3 positionW,\n  vec3 lightColor,\n  float lightRange\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPosition - positionW;\n  float attenuation = max(0.0, 1.0 - length(lightDir) / lightRange);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor * attenuation;\n\n  return ret;\n}\n\n\nLightInfo computeSpotLighting(\n  vec3 lightPosition,\n  vec3 positionW,\n  vec3 lightDirection,\n  vec3 lightColor,\n  vec2 lightSpot,\n  float lightRange\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPosition - positionW;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightRange);\n  float cosConeAngle = max(0., dot(lightDirection, -lightDir));\n  cosConeAngle = cosConeAngle < lightSpot.x ? 0.0 : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle,lightSpot.y);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor * attenuation * cosConeAngle;\n\n  return ret;\n}\n\n\n\nvec3 unpackNormal(vec4 nmap) {\n  return nmap.xyz * 2.0 - 1.0;\n}\n\nvec3 unpackRGBE(vec4 rgbe) {\n    return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\n\n#if _USE_SHADOW_MAP\n  \n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n  \n\n#if _NUM_SHADOW_LIGHTS > 0\n  #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n    uniform sampler2D _shadowMap_{id};\n    uniform float _darkness_{id};\n    uniform float _depthScale_{id};\n    uniform float _frustumEdgeFalloff_{id};\n    uniform float _bias_{id};\n    uniform vec2 _texelSize_{id};\n    varying vec4 pos_lightspace_{id};\n    varying float vDepth_{id};\n  #pragma endFor\n#endif\n\nfloat computeShadow(sampler2D shadowMap, vec4 pos_lightspace, float _bias) {\n  vec3 projCoords = pos_lightspace.xyz / pos_lightspace.w;\n  projCoords = projCoords * 0.5 + 0.5;\n  float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, projCoords.xy));\n  float currentDepth = projCoords.z;\n  float shadow = (currentDepth - _bias > closestDepth) ? 0.0 : 1.0;\n  return shadow;\n}\n\nfloat computeFallOff(float esm, vec2 coords, float frustumEdgeFalloff) {\n  float mask = smoothstep(1.0 - frustumEdgeFalloff, 1.0, clamp(dot(coords, coords), 0.0, 1.0));\n  return mix(esm, 1.0, mask);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfloat computeShadowESM(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float depthScale, float darkness, float frustumEdgeFalloff) {\n  vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n  vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n  if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n    return 1.0;\n  }\n  float currentDepth = clamp(vDepth, 0.0, 1.0);\n  float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n  \n  float esm = clamp(exp(-depthScale * (currentDepth - closestDepth)), 1.0 - darkness, 1.0);\n  return computeFallOff(esm, projCoords, frustumEdgeFalloff);\n}\n\nfloat computeShadowPCF(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float darkness, vec2 texelSize, float frustumEdgeFalloff) {\n  vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n  vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n  if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n    return 1.0;\n  }\n  float currentDepth = clamp(vDepth, 0.0, 1.0);\n  float visibility = 1.0;\n  vec2 poissonDisk[4];\n  poissonDisk[0] = vec2(-0.94201624, -0.39906216);\n  poissonDisk[1] = vec2(0.94558609, -0.76890725);\n  poissonDisk[2] = vec2(-0.094184101, -0.92938870);\n  poissonDisk[3] = vec2(0.34495938, 0.29387760);\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[0] * texelSize)) < currentDepth) visibility -= 0.25;\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[1] * texelSize)) < currentDepth) visibility -= 0.25;\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[2] * texelSize)) < currentDepth) visibility -= 0.25;\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[3] * texelSize)) < currentDepth) visibility -= 0.25;\n\n  return computeFallOff(min(1.0, visibility + 1.0 - darkness), projCoords, frustumEdgeFalloff);\n}\n\nfloat computeShadow() {\n  float shadow = 1.0;\n  #if _NUM_SHADOW_LIGHTS > 0\n    #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n      shadow *= computeShadowESM(_shadowMap_{id}, pos_lightspace_{id}, vDepth_{id}, _depthScale_{id}, _darkness_{id}, _frustumEdgeFalloff_{id});\n    #pragma endFor\n  #endif\n  return shadow;\n}\n\n#endif\n\nuniform vec3 _eye;\n\nvarying vec3 pos_w;\nvarying vec3 normal_w;\n\n#if USE_ALBEDO_TEXTURE || USE_NORMAL_TEXTURE || USE_MRA_TEXTURE || USE_METALLIC_TEXTURE || USE_ROUGHNESS_TEXTURE || USE_AO_TEXTURE || USE_EMISSIVE_TEXTURE\n  varying vec2 uv0;\n#endif\n\n#if USE_IBL\n  uniform samplerCube diffuseEnvTexture;\n  uniform samplerCube specularEnvTexture;\n  uniform sampler2D brdfLUT;\n  #if USE_TEX_LOD\n    uniform float maxReflectionLod;\n  #endif\n#endif\n\n\nuniform vec4 albedo;\n#if USE_ALBEDO_TEXTURE\n  uniform sampler2D albedo_texture;\n#endif\n\n#if USE_MRA_TEXTURE\n  uniform sampler2D mra_texture;\n#endif\n\nuniform float metallic;\n#if USE_METALLIC_TEXTURE\n  uniform sampler2D metallic_texture;\n#endif\n\nuniform float roughness;\n#if USE_ROUGHNESS_TEXTURE\n  uniform sampler2D roughness_texture;\n#endif\n\nuniform float ao;\n#if USE_AO_TEXTURE\n  uniform sampler2D ao_texture;\n#endif\n\n#if USE_EMISSIVE\n  uniform vec3 emissive;\n  #if USE_EMISSIVE_TEXTURE\n    uniform sampler2D emissive_texture;\n  #endif\n#endif\n\n#if USE_ALPHA_TEST\n  uniform float alphaTestThreshold;\n#endif\n\n#if USE_NORMAL_TEXTURE\n  uniform sampler2D normal_texture;\n  \n  vec3 getNormalFromTexture() {\n    vec3 tangentNormal = texture2D(normal_texture, uv0).rgb * 2.0 - 1.0;\n    vec3 q1  = dFdx(pos_w);\n    vec3 q2  = dFdy(pos_w);\n    vec2 st1 = dFdx(uv0);\n    vec2 st2 = dFdy(uv0);\n    vec3 N   = normalize(normal_w);\n    vec3 T   = normalize(q1*st2.t - q2*st1.t);\n    vec3 B   = -normalize(cross(N, T));\n    mat3 TBN = mat3(T, B, N);\n\n    return normalize(TBN * tangentNormal);\n  }\n#endif\n\n\n\n\nfloat distributionGGX(vec3 N, vec3 H, float roughness) {\n  float a = roughness * roughness;\n  float a2 = a * a;\n  float NdotH = max(dot(N, H), 0.0);\n  float NdotH2 = NdotH * NdotH;\n  float nom   = a2;\n  float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n  denom = PI * denom * denom;\n\n  return nom / denom;\n}\n\n\nfloat geometrySchlickGGX(float NdotV, float roughness) {\n  float r = (roughness + 1.0);\n  float k = (r * r) / 8.0;\n  float nom   = NdotV;\n  float denom = NdotV * (1.0 - k) + k;\n\n  return nom / denom;\n}\nfloat geometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {\n  float NdotV = max(dot(N, V), 0.0);\n  float NdotL = max(dot(N, L), 0.0);\n  float ggx2 = geometrySchlickGGX(NdotV, roughness);\n  float ggx1 = geometrySchlickGGX(NdotL, roughness);\n\n  return ggx1 * ggx2;\n}\n\n\n\nvec3 fresnelSchlick(float cosTheta, vec3 F0) {\n  float fresnel = exp2((-5.55473 * cosTheta - 6.98316) * cosTheta);\n  return F0 + (1.0 - F0) * fresnel;\n}\nvec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness) {\n  float fresnel = exp2((-5.55473 * cosTheta - 6.98316) * cosTheta);\n  return F0 + (max(vec3(1.0 - roughness), F0) - F0) * fresnel;\n}\n\n\nvec3 brdf(LightInfo lightInfo, vec3 N, vec3 V, vec3 F0, vec3 albedo, float metallic, float roughness) {\n  vec3 H = normalize(V + lightInfo.lightDir);\n  float NDF = distributionGGX(N, H, roughness);\n  float G   = geometrySmith(N, V, lightInfo.lightDir, roughness);\n  vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);\n  vec3 nominator    = NDF * G * F;\n  float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, lightInfo.lightDir), 0.0) + 0.001; \n  vec3 specular = nominator / denominator;\n  \n  vec3 kS = F;\n  \n  \n  \n  vec3 kD = vec3(1.0) - kS;\n  \n  \n  \n  kD *= 1.0 - metallic;\n  float NdotL = max(dot(N, lightInfo.lightDir), 0.0);\n\n  return (kD * albedo / PI + specular) * lightInfo.radiance * NdotL;\n}\n\nvec4 frag() {\n  float opacity = 1.0;\n\n  #if USE_ALBEDO_TEXTURE\n    vec4 baseColor = albedo * gammaToLinearSpaceRGBA(texture2D(albedo_texture, uv0));\n    vec3 albedo = baseColor.rgb;\n    opacity = baseColor.a;\n  #else\n    opacity = albedo.a;\n    vec3 albedo = albedo.rgb;\n  #endif\n\n  #if USE_ALPHA_TEST\n    if(opacity < alphaTestThreshold) discard;\n  #endif\n\n  #if USE_MRA_TEXTURE\n    vec3 metalRoughness = texture2D(mra_texture, uv0).rgb;\n    float metallic = metalRoughness.r;\n    float roughness = metalRoughness.g;\n    float ao = metalRoughness.b;\n  #else\n    #if USE_METALLIC_TEXTURE\n      float metallic  = texture2D(metallic_texture, uv0).r;\n    #endif\n    #if USE_ROUGHNESS_TEXTURE\n      float roughness  = texture2D(roughness_texture, uv0).r;\n    #endif\n    #if USE_AO_TEXTURE\n      float ao  = texture2D(ao_texture, uv0).r;\n    #endif\n  #endif\n\n  vec3 N = normalize(normal_w);\n  #if USE_NORMAL_TEXTURE\n    N = getNormalFromTexture();\n  #endif\n  vec3 V = normalize(_eye - pos_w);\n\n  \n  \n  vec3 F0 = vec3(0.04);\n  F0 = mix(F0, albedo, metallic);\n\n  \n  vec3 Lo = vec3(0.0);\n\n  \n  #if _NUM_POINT_LIGHTS > 0\n    #pragma for id in range(0, _NUM_POINT_LIGHTS)\n      LightInfo pointLight{id};\n      pointLight{id} = computePointLighting(_point_light{id}_position, pos_w, _point_light{id}_color, _point_light{id}_range);\n      Lo += brdf(pointLight{id}, N, V, F0, albedo, metallic, roughness);\n    #pragma endFor\n  #endif\n\n  #if _NUM_DIR_LIGHTS > 0\n    #pragma for id in range(0, _NUM_DIR_LIGHTS)\n      LightInfo directionalLight{id};\n      directionalLight{id} = computeDirectionalLighting(_dir_light{id}_direction, _dir_light{id}_color);\n      Lo += brdf(directionalLight{id}, N, V, F0, albedo, metallic, roughness);\n    #pragma endFor\n  #endif\n\n  #if _NUM_SPOT_LIGHTS > 0\n    #pragma for id in range(0, _NUM_SPOT_LIGHTS)\n      LightInfo spotLight{id};\n      spotLight{id} = computeSpotLighting(_spot_light{id}_position, pos_w, _spot_light{id}_direction, _spot_light{id}_color, _spot_light{id}_spot, _spot_light{id}_range);\n      Lo += brdf(spotLight{id}, N, V, F0, albedo, metallic, roughness);\n    #pragma endFor\n  #endif\n\n  #if USE_EMISSIVE\n    vec3 emissiveColor = emissive;\n    #if USE_EMISSIVE_TEXTURE\n      emissiveColor *= gammaToLinearSpaceRGB(texture2D(emissive_texture, uv0).rgb);\n    #endif\n    Lo += emissiveColor;\n  #endif\n\n  \n  vec3 ambient = vec3(0.03) * albedo * ao;\n\n  #if USE_IBL\n    \n    vec3 F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);\n    vec3 kS = F;\n    vec3 kD = vec3(1.0) - kS;\n    kD *= 1.0 - metallic;\n    #if USE_RGBE_IBL_DIFFUSE\n      vec3 diffuseEnv = unpackRGBE(textureCube(diffuseEnvTexture, N));\n    #else\n      vec3 diffuseEnv = textureCube(diffuseEnvTexture, N).rgb;\n    #endif\n    vec3 diffuse = diffuseEnv * albedo;\n    \n    vec3 R = reflect(-V, N);\n    #if USE_TEX_LOD\n      #if USE_RGBE_IBL_SPECULAR\n        vec3 specularEnv = unpackRGBE(textureCubeLodEXT(specularEnvTexture, R, roughness * maxReflectionLod));\n      #else\n        vec3 specularEnv = textureCubeLodEXT(specularEnvTexture, R, roughness * maxReflectionLod).rgb;\n      #endif\n    #else\n      #if USE_RGBE_IBL_SPECULAR\n        vec3 specularEnv = unpackRGBE(textureCube(specularEnvTexture, R));\n      #else\n        vec3 specularEnv = textureCube(specularEnvTexture, R).rgb;\n      #endif\n    #endif\n    vec2 brdf  = texture2D(brdfLUT, vec2(max(dot(N, V), 0.0), 1.0 - roughness)).rg;\n    vec3 specular = specularEnv * (F * brdf.x + brdf.y);\n    ambient = (kD * diffuse + specular) * ao;\n  #endif\n\n  vec3 color = ambient + Lo;\n  #if _USE_SHADOW_MAP\n    color *= computeShadow();\n  #endif\n\n  \n  color = color / (color + vec3(1.0));\n  \n  vec4 finalColor = vec4(color, opacity);\n\n  return linearToGammaSpaceRGBA(finalColor);\n}\n\nvoid main() { gl_FragColor = frag(); }\n",
      "defines": [
        {
          "name": "USE_ALBEDO_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "_USE_SKINNING",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "_USE_JOINTS_TEXTURE",
          "type": "boolean",
          "defines": [
            "_USE_SKINNING"
          ]
        },
        {
          "name": "_USE_SHADOW_MAP",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "_NUM_SHADOW_LIGHTS",
          "type": "number",
          "defines": [
            "_USE_SHADOW_MAP"
          ]
        },
        {
          "name": "USE_NORMAL_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_TEX_LOD",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "_NUM_DIR_LIGHTS",
          "type": "number",
          "defines": []
        },
        {
          "name": "_NUM_POINT_LIGHTS",
          "type": "number",
          "defines": []
        },
        {
          "name": "_NUM_SPOT_LIGHTS",
          "type": "number",
          "defines": []
        },
        {
          "name": "USE_IBL",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_MRA_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_METALLIC_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_ROUGHNESS_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_AO_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_EMISSIVE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_EMISSIVE_TEXTURE",
          "type": "boolean",
          "defines": [
            "USE_EMISSIVE"
          ]
        },
        {
          "name": "USE_ALPHA_TEST",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_RGBE_IBL_DIFFUSE",
          "type": "boolean",
          "defines": [
            "USE_IBL"
          ]
        },
        {
          "name": "USE_RGBE_IBL_SPECULAR",
          "type": "boolean",
          "defines": [
            "USE_IBL"
          ]
        }
      ],
      "uniforms": [
        {
          "name": "mainTiling",
          "type": 5,
          "defines": []
        },
        {
          "name": "mainOffset",
          "type": 5,
          "defines": []
        },
        {
          "name": "diffuseEnvTexture",
          "type": 14,
          "defines": [
            "USE_IBL"
          ]
        },
        {
          "name": "specularEnvTexture",
          "type": 14,
          "defines": [
            "USE_IBL"
          ]
        },
        {
          "name": "brdfLUT",
          "type": 13,
          "defines": [
            "USE_IBL"
          ]
        },
        {
          "name": "maxReflectionLod",
          "type": 4,
          "defines": [
            "USE_IBL",
            "USE_TEX_LOD"
          ]
        },
        {
          "name": "albedo",
          "type": 7,
          "defines": []
        },
        {
          "name": "albedo_texture",
          "type": 13,
          "defines": [
            "USE_ALBEDO_TEXTURE"
          ]
        },
        {
          "name": "mra_texture",
          "type": 13,
          "defines": [
            "USE_MRA_TEXTURE"
          ]
        },
        {
          "name": "metallic",
          "type": 4,
          "defines": []
        },
        {
          "name": "metallic_texture",
          "type": 13,
          "defines": [
            "USE_METALLIC_TEXTURE"
          ]
        },
        {
          "name": "roughness",
          "type": 4,
          "defines": []
        },
        {
          "name": "roughness_texture",
          "type": 13,
          "defines": [
            "USE_ROUGHNESS_TEXTURE"
          ]
        },
        {
          "name": "ao",
          "type": 4,
          "defines": []
        },
        {
          "name": "ao_texture",
          "type": 13,
          "defines": [
            "USE_AO_TEXTURE"
          ]
        },
        {
          "name": "emissive",
          "type": 6,
          "defines": [
            "USE_EMISSIVE"
          ]
        },
        {
          "name": "emissive_texture",
          "type": 13,
          "defines": [
            "USE_EMISSIVE",
            "USE_EMISSIVE_TEXTURE"
          ]
        },
        {
          "name": "alphaTestThreshold",
          "type": 4,
          "defines": [
            "USE_ALPHA_TEST"
          ]
        },
        {
          "name": "normal_texture",
          "type": 13,
          "defines": [
            "USE_NORMAL_TEXTURE"
          ]
        }
      ],
      "attributes": [
        {
          "name": "a_position",
          "type": 6,
          "defines": []
        },
        {
          "name": "a_normal",
          "type": 6,
          "defines": []
        },
        {
          "name": "a_uv0",
          "type": 5,
          "defines": []
        },
        {
          "name": "a_weights",
          "type": 7,
          "defines": [
            "_USE_SKINNING"
          ]
        },
        {
          "name": "a_joints",
          "type": 7,
          "defines": [
            "_USE_SKINNING"
          ]
        }
      ],
      "extensions": [
        {
          "name": "OES_standard_derivatives",
          "define": "USE_NORMAL_TEXTURE"
        },
        {
          "name": "EXT_shader_texture_lod",
          "define": "USE_TEX_LOD"
        }
      ],
      "name": "3bbb17eee42820308fa22885ad5c1334c2c9f410e1ae02576fa19b69"
    },
    {
      "vert": "\n\nattribute vec3 a_position;\n\nuniform mat4 _model;\nuniform mat4 _lightViewProjMatrix;\nuniform float _minDepth;\nuniform float _maxDepth;\nuniform float _bias;\nvarying float vDepth;\n\n#if _USE_SKINNING\n  \n\nattribute vec4 a_weights;\nattribute vec4 a_joints;\n\n#if _USE_JOINTS_TEXTURE\nuniform sampler2D _u_jointsTexture;\nuniform float _u_jointsTextureSize;\n\nmat4 getBoneMatrix(const in float i) {\n  float size = _u_jointsTextureSize;\n  float j = i * 4.0;\n  float x = mod(j, size);\n  float y = floor(j / size);\n\n  float dx = 1.0 / size;\n  float dy = 1.0 / size;\n\n  y = dy * (y + 0.5);\n\n  vec4 v1 = texture2D(_u_jointsTexture, vec2(dx * (x + 0.5), y));\n  vec4 v2 = texture2D(_u_jointsTexture, vec2(dx * (x + 1.5), y));\n  vec4 v3 = texture2D(_u_jointsTexture, vec2(dx * (x + 2.5), y));\n  vec4 v4 = texture2D(_u_jointsTexture, vec2(dx * (x + 3.5), y));\n\n  return mat4(v1, v2, v3, v4);\n}\n#else\nuniform mat4 _u_jointMatrices[128];\n\nmat4 getBoneMatrix(const in float i) {\n  return _u_jointMatrices[int(i)];\n}\n#endif\n\nmat4 skinMatrix() {\n  return\n    getBoneMatrix(a_joints.x) * a_weights.x +\n    getBoneMatrix(a_joints.y) * a_weights.y +\n    getBoneMatrix(a_joints.z) * a_weights.z +\n    getBoneMatrix(a_joints.w) * a_weights.w\n    ;\n}\n\nvoid skinVertex(inout vec4 a1) {\n  mat4 m = skinMatrix();\n  a1 = m * a1;\n}\n\nvoid skinVertex(inout vec4 a1, inout vec4 a2) {\n  mat4 m = skinMatrix();\n  a1 = m * a1;\n  a2 = m * a2;\n}\n\nvoid skinVertex(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  mat4 m = skinMatrix();\n  a1 = m * a1;\n  a2 = m * a2;\n  a3 = m * a3;\n}\n\n#endif\n\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n\n  #if _USE_SKINNING\n    mat4 skinMat = skinMatrix();\n    pos = skinMat * pos;\n  #endif\n\n  \n  vDepth = ((gl_Position.z + _minDepth) / (_minDepth + _maxDepth)) + _bias;\n  return _lightViewProjMatrix * _model * pos;\n}\n\nvoid main() { gl_Position = vert(); }\n",
      "frag": "\n\nuniform float _depthScale;\nvarying float vDepth;\n\n\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\nvec4 frag() {\n  \n  \n  return packDepthToRGBA(vDepth);\n  \n  \n}\n\nvoid main() { gl_FragColor = frag(); }\n",
      "defines": [
        {
          "name": "_USE_SKINNING",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "_USE_JOINTS_TEXTURE",
          "type": "boolean",
          "defines": [
            "_USE_SKINNING"
          ]
        }
      ],
      "uniforms": [],
      "attributes": [
        {
          "name": "a_position",
          "type": 6,
          "defines": []
        },
        {
          "name": "a_weights",
          "type": 7,
          "defines": [
            "_USE_SKINNING"
          ]
        },
        {
          "name": "a_joints",
          "type": 7,
          "defines": [
            "_USE_SKINNING"
          ]
        }
      ],
      "extensions": [],
      "name": "81c5df70cfe5dbdf610be1720c37d54f5081aad5fb15b296b203fdb8"
    }
  ]
}