%{
  techniques: [
    {
      queue: opaque
      lod: 100
      passes: [
        {
          vert: matcap-vs
          frag: matcap-fs
          stage: default
          depthTest: true
          depthWrite: true
        }
      ]
    }
  ]

  properties: {
    mainTex: {
      type: sampler2D
      value: null
    }
    matcapTex: {
      type: sampler2D
      value: null
    }
    colorFactor: {
      type: float
      value: 0.5
    }
    color: {
      type: color4
      value: [1, 1, 1, 1]
    }
  }
%}

%% matcap-vs {
  attribute vec3 a_position;
  attribute vec3 a_normal;
  uniform   mat4 _model;
  uniform   mat4 _viewProj;
  uniform   mat3 _normalMatrix;
  varying   vec2 matcapUV;

  #if USE_MAIN_TEX
    attribute vec2 a_uv0;
    varying   vec2 uv0;
  #endif

  #if _USE_SKINNING
    #include <skinning>
  #endif

  void main(void){
    vec4 pos = vec4(a_position, 1);
    vec4 normal = vec4(a_normal, 0);

    #if _USE_SKINNING
      skinVertex(pos, normal);
    #endif

    pos = _viewProj * _model * pos;
    normal = vec4(normalize(_normalMatrix * normal.xyz), 0);
    gl_Position = pos;

    matcapUV = normal.xy;
    matcapUV = matcapUV * 0.5 + 0.5;

    #if USE_MAIN_TEX
      uv0 = a_uv0;
    #endif
  }
}

%% matcap-fs {
  uniform sampler2D matcapTex;
  uniform float colorFactor;
  uniform vec4 color;
  varying vec2 matcapUV;

  #if USE_MAIN_TEX
    varying vec2 uv0;
    uniform sampler2D mainTex;
  #endif

  void main(void){
    vec4 col = vec4(1, 1, 1, 1);
    col *= color;
    #if USE_MAIN_TEX
      col *= texture2D(mainTex, uv0);
    #endif
    vec4 matcapColor = texture2D(matcapTex, matcapUV);
    gl_FragColor = col * colorFactor + matcapColor * (1.0 - colorFactor);
  }
}
