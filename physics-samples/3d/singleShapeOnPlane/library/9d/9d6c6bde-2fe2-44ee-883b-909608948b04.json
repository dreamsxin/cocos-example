{
  "__type__": "cc.EffectAsset",
  "_name": "__editor-gizmo",
  "_objFlags": 0,
  "_native": "",
  "techniques": [
    {
      "queue": 1,
      "lod": 100,
      "passes": [
        {
          "stage": 1,
          "cullMode": 0,
          "depthTest": false,
          "depthWrite": false,
          "blend": true,
          "blendSrc": 770,
          "blendDst": 771,
          "program": "170b320bea1375afce32fafc0d5d0e88135aa0cf7aa18f4956668ad3"
        }
      ],
      "priority": 1000
    },
    {
      "queue": 1,
      "lod": 50,
      "passes": [
        {
          "stage": 1,
          "cullMode": 0,
          "blend": true,
          "blendSrc": 770,
          "blendDst": 771,
          "program": "0985b1d59276ef8ad9c72b443fb99f6f29a27063b05ee885c10aa447"
        }
      ],
      "priority": 1000
    },
    {
      "queue": 1,
      "lod": 0,
      "passes": [
        {
          "stage": 1,
          "cullMode": 0,
          "depthTest": true,
          "blend": true,
          "blendSrc": 770,
          "blendDst": 1,
          "program": "0985b1d59276ef8ad9c72b443fb99f6f29a27063b05ee885c10aa447"
        },
        {
          "stage": 1,
          "cullMode": 0,
          "depthTest": true,
          "depthFunc": 516,
          "blend": true,
          "blendSrc": 770,
          "blendDst": 1,
          "program": "31918aa8e10902a035c120cf28c5ec6445b59c7378225fbb72e7e242"
        }
      ],
      "priority": 1000
    }
  ],
  "properties": {
    "color": {
      "type": 9,
      "value": [
        1,
        1,
        1,
        1
      ]
    }
  },
  "shaders": [
    {
      "vert": "\n  attribute vec3 a_position;\n  attribute vec3 a_normal;\n\n  uniform mat4 _model;\n  uniform mat4 _view;\n  uniform mat4 _viewProj;\n  uniform mat3 _normalMatrix;\n\n  varying vec3 normal_w;\n  varying vec3 pos_w;\n  varying vec3 pos_l;\n  varying vec3 right;\n  varying vec3 up;\n  varying vec3 forward;\n\n  void main () {\n    vec4 pos = vec4(a_position, 1);\n\n    pos_l = a_position;\n    pos_w = (_model * pos).xyz;\n    normal_w = _normalMatrix * a_normal;\n    right = vec3(_view[0][0], _view[1][0], _view[2][0]);\n    up = vec3(_view[0][1], _view[1][1], _view[2][1]);\n    forward = vec3(_view[0][2], _view[1][2], _view[2][2]);\n\n    gl_Position = _viewProj * _model * pos;\n  }\n",
      "frag": "\n  \n\n\n\nvec3 gammaToLinearSpaceRGB(vec3 sRGB) { \n  return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n}\n\nvec3 linearToGammaSpaceRGB(vec3 RGB) { \n  vec3 S1 = sqrt(RGB);\n  vec3 S2 = sqrt(S1);\n  vec3 S3 = sqrt(S2);\n  return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\n\nvec4 gammaToLinearSpaceRGBA(vec4 sRGBA) {\n  return vec4(gammaToLinearSpaceRGB(sRGBA.rgb), sRGBA.a);\n}\n\nvec4 linearToGammaSpaceRGBA(vec4 RGBA) {\n  return vec4(linearToGammaSpaceRGB(RGBA.rgb), RGBA.a);\n}\n\n\nfloat gammaToLinearSpaceExact(float val) {\n  if (val <= 0.04045) {\n    return val / 12.92;\n  } else if (val < 1.0) {\n    return pow((val + 0.055) / 1.055, 2.4);\n  } else {\n    return pow(val, 2.2);\n  }\n}\n\nfloat linearToGammaSpaceExact(float val) {\n  if (val <= 0.0) {\n    return 0.0;\n  } else if (val <= 0.0031308) {\n    return 12.92 * val;\n  } else if (val < 1.0) {\n    return 1.055 * pow(val, 0.4166667) - 0.055;\n  } else {\n    return pow(val, 0.45454545);\n  }\n}\n  \n\nmat3 transpose(mat3 v) {\n    mat3 tmp;\n    tmp[0] = vec3(v[0].x, v[1].x, v[2].x);\n    tmp[1] = vec3(v[0].y, v[1].y, v[2].y);\n    tmp[2] = vec3(v[0].z, v[1].z, v[2].z);\n\n    return tmp;\n}\n\nvoid ClipQuadToHorizon(inout vec3 L[5], out int n) {\n    \n    int config = 0;\n    if (L[0].z > 0.0) config += 1;\n    if (L[1].z > 0.0) config += 2;\n    if (L[2].z > 0.0) config += 4;\n    if (L[3].z > 0.0) config += 8;\n    config = 15;\n\n    \n    n = 0;\n\n    if (config == 0)\n    {\n        \n    }\n    else if (config == 1) \n    {\n        n = 3;\n        L[1] = -L[1].z * L[0] + L[0].z * L[1];\n        L[2] = -L[3].z * L[0] + L[0].z * L[3];\n    }\n    else if (config == 2) \n    {\n        n = 3;\n        L[0] = -L[0].z * L[1] + L[1].z * L[0];\n        L[2] = -L[2].z * L[1] + L[1].z * L[2];\n    }\n    else if (config == 3) \n    {\n        n = 4;\n        L[2] = -L[2].z * L[1] + L[1].z * L[2];\n        L[3] = -L[3].z * L[0] + L[0].z * L[3];\n    }\n    else if (config == 4) \n    {\n        n = 3;\n        L[0] = -L[3].z * L[2] + L[2].z * L[3];\n        L[1] = -L[1].z * L[2] + L[2].z * L[1];\n    }\n    else if (config == 5) \n    {\n        n = 0;\n    }\n    else if (config == 6) \n    {\n        n = 4;\n        L[0] = -L[0].z * L[1] + L[1].z * L[0];\n        L[3] = -L[3].z * L[2] + L[2].z * L[3];\n    }\n    else if (config == 7) \n    {\n        n = 5;\n        L[4] = -L[3].z * L[0] + L[0].z * L[3];\n        L[3] = -L[3].z * L[2] + L[2].z * L[3];\n    }\n    else if (config == 8) \n    {\n        n = 3;\n        L[0] = -L[0].z * L[3] + L[3].z * L[0];\n        L[1] = -L[2].z * L[3] + L[3].z * L[2];\n        L[2] =  L[3];\n    }\n    else if (config == 9) \n    {\n        n = 4;\n        L[1] = -L[1].z * L[0] + L[0].z * L[1];\n        L[2] = -L[2].z * L[3] + L[3].z * L[2];\n    }\n    else if (config == 10) \n    {\n        n = 0;\n    }\n    else if (config == 11) \n    {\n        n = 5;\n        L[4] = L[3];\n        L[3] = -L[2].z * L[3] + L[3].z * L[2];\n        L[2] = -L[2].z * L[1] + L[1].z * L[2];\n    }\n    else if (config == 12) \n    {\n        n = 4;\n        L[1] = -L[1].z * L[2] + L[2].z * L[1];\n        L[0] = -L[0].z * L[3] + L[3].z * L[0];\n    }\n    else if (config == 13) \n    {\n        n = 5;\n        L[4] = L[3];\n        L[3] = L[2];\n        L[2] = -L[1].z * L[2] + L[2].z * L[1];\n        L[1] = -L[1].z * L[0] + L[0].z * L[1];\n    }\n    else if (config == 14) \n    {\n        n = 5;\n        L[4] = -L[0].z * L[3] + L[3].z * L[0];\n        L[0] = -L[0].z * L[1] + L[1].z * L[0];\n    }\n    else if (config == 15) \n    {\n        n = 4;\n    }\n\n    if (n == 3)\n        L[3] = L[0];\n    if (n == 4)\n        L[4] = L[0];\n}\n\n\nfloat IntegrateEdge(vec3 v1, vec3 v2) {\n    float cosTheta = dot(v1, v2);\n    float theta = acos(cosTheta);\n    return cross(v1, v2).z * ((theta > 0.001) ? theta/sin(theta) : 4.0);\n}\n\nvec3 LTC_Evaluate(vec3 N, vec3 V, vec3 P, mat3 Minv, vec3 points[4]) {\n    \n    vec3 T1, T2;\n    T1 = normalize(V - N*dot(V, N));\n    T2 = cross(N, T1);\n\n    \n    Minv = Minv * transpose(mat3(T1, T2, N));\n\n    \n    vec3 L[5];\n    L[0] = Minv * (points[0] - P);\n    L[1] = Minv * (points[1] - P);\n    L[2] = Minv * (points[2] - P);\n    L[3] = Minv * (points[3] - P);\n\n    int n;\n    ClipQuadToHorizon(L, n);\n\n    if (n == 0)\n        return vec3(0, 0, 0);\n\n    \n    L[0] = normalize(L[0]);\n    L[1] = normalize(L[1]);\n    L[2] = normalize(L[2]);\n    L[3] = normalize(L[3]);\n    L[4] = normalize(L[4]);\n\n    \n    float sum = 0.0;\n\n    sum += IntegrateEdge(L[0], L[1]);\n    sum += IntegrateEdge(L[1], L[2]);\n    sum += IntegrateEdge(L[2], L[3]);\n    if (n >= 4)\n        sum += IntegrateEdge(L[3], L[4]);\n    if (n == 5)\n        sum += IntegrateEdge(L[4], L[0]);\n\n    sum = max(0.0, sum);\n\n    vec3 Lo_i = vec3(sum, sum, sum);\n\n    return Lo_i;\n}\n\n\n  uniform vec3 _eye;\n  uniform vec4 color;\n\n  varying vec3 normal_w;\n  varying vec3 pos_w;\n  varying vec3 pos_l;\n  varying vec3 right;\n  varying vec3 up;\n  varying vec3 forward;\n\n  void main () {\n    vec3 N = normalize(normal_w);\n    vec3 V = normalize(_eye - pos_w);\n\n    \n    \n\n    vec3 points[4];\n    vec3 up = vec3(0, 1, 0);\n    points[0] = (forward * 3.0 + right + up) * 40.0;\n    points[1] = (forward * 3.0 - right + up) * 40.0;\n    points[2] = (forward * 3.0 - right - up) * 40.0;\n    points[3] = (forward * 3.0 + right - up) * 40.0;\n    vec3 diffuse = color.rgb * (0.2 + LTC_Evaluate(N, V, pos_l, mat3(1), points) * 0.8);\n\n    gl_FragColor = linearToGammaSpaceRGBA(vec4(diffuse, color.a));\n  }\n",
      "defines": [],
      "uniforms": [
        {
          "name": "color",
          "type": 7,
          "defines": []
        }
      ],
      "attributes": [
        {
          "name": "a_position",
          "type": 6,
          "defines": []
        },
        {
          "name": "a_normal",
          "type": 6,
          "defines": []
        }
      ],
      "extensions": [],
      "name": "170b320bea1375afce32fafc0d5d0e88135aa0cf7aa18f4956668ad3"
    },
    {
      "vert": "\n  attribute vec3 a_position;\n\n  uniform mat4 _model;\n  uniform mat4 _viewProj;\n\n  void main () {\n    gl_Position = _viewProj * _model * vec4(a_position, 1);\n    gl_Position.z -= 0.0001;\n  }\n",
      "frag": "\n  \n\n\n\nvec3 gammaToLinearSpaceRGB(vec3 sRGB) { \n  return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n}\n\nvec3 linearToGammaSpaceRGB(vec3 RGB) { \n  vec3 S1 = sqrt(RGB);\n  vec3 S2 = sqrt(S1);\n  vec3 S3 = sqrt(S2);\n  return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\n\nvec4 gammaToLinearSpaceRGBA(vec4 sRGBA) {\n  return vec4(gammaToLinearSpaceRGB(sRGBA.rgb), sRGBA.a);\n}\n\nvec4 linearToGammaSpaceRGBA(vec4 RGBA) {\n  return vec4(linearToGammaSpaceRGB(RGBA.rgb), RGBA.a);\n}\n\n\nfloat gammaToLinearSpaceExact(float val) {\n  if (val <= 0.04045) {\n    return val / 12.92;\n  } else if (val < 1.0) {\n    return pow((val + 0.055) / 1.055, 2.4);\n  } else {\n    return pow(val, 2.2);\n  }\n}\n\nfloat linearToGammaSpaceExact(float val) {\n  if (val <= 0.0) {\n    return 0.0;\n  } else if (val <= 0.0031308) {\n    return 12.92 * val;\n  } else if (val < 1.0) {\n    return 1.055 * pow(val, 0.4166667) - 0.055;\n  } else {\n    return pow(val, 0.45454545);\n  }\n}\n  uniform vec4 color;\n  vec4 front() {\n    return linearToGammaSpaceRGBA(color);\n  }\n  vec4 back() {\n    return linearToGammaSpaceRGBA(vec4(color.rgb, color.a * 0.2));\n  }\n\nvoid main() { gl_FragColor = front(); }\n",
      "defines": [],
      "uniforms": [
        {
          "name": "color",
          "type": 7,
          "defines": []
        }
      ],
      "attributes": [
        {
          "name": "a_position",
          "type": 6,
          "defines": []
        }
      ],
      "extensions": [],
      "name": "0985b1d59276ef8ad9c72b443fb99f6f29a27063b05ee885c10aa447"
    },
    {
      "vert": "\n  attribute vec3 a_position;\n\n  uniform mat4 _model;\n  uniform mat4 _viewProj;\n\n  void main () {\n    gl_Position = _viewProj * _model * vec4(a_position, 1);\n    gl_Position.z -= 0.0001;\n  }\n",
      "frag": "\n  \n\n\n\nvec3 gammaToLinearSpaceRGB(vec3 sRGB) { \n  return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n}\n\nvec3 linearToGammaSpaceRGB(vec3 RGB) { \n  vec3 S1 = sqrt(RGB);\n  vec3 S2 = sqrt(S1);\n  vec3 S3 = sqrt(S2);\n  return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\n\nvec4 gammaToLinearSpaceRGBA(vec4 sRGBA) {\n  return vec4(gammaToLinearSpaceRGB(sRGBA.rgb), sRGBA.a);\n}\n\nvec4 linearToGammaSpaceRGBA(vec4 RGBA) {\n  return vec4(linearToGammaSpaceRGB(RGBA.rgb), RGBA.a);\n}\n\n\nfloat gammaToLinearSpaceExact(float val) {\n  if (val <= 0.04045) {\n    return val / 12.92;\n  } else if (val < 1.0) {\n    return pow((val + 0.055) / 1.055, 2.4);\n  } else {\n    return pow(val, 2.2);\n  }\n}\n\nfloat linearToGammaSpaceExact(float val) {\n  if (val <= 0.0) {\n    return 0.0;\n  } else if (val <= 0.0031308) {\n    return 12.92 * val;\n  } else if (val < 1.0) {\n    return 1.055 * pow(val, 0.4166667) - 0.055;\n  } else {\n    return pow(val, 0.45454545);\n  }\n}\n  uniform vec4 color;\n  vec4 front() {\n    return linearToGammaSpaceRGBA(color);\n  }\n  vec4 back() {\n    return linearToGammaSpaceRGBA(vec4(color.rgb, color.a * 0.2));\n  }\n\nvoid main() { gl_FragColor = front(); }\n",
      "defines": [],
      "uniforms": [
        {
          "name": "color",
          "type": 7,
          "defines": []
        }
      ],
      "attributes": [
        {
          "name": "a_position",
          "type": 6,
          "defines": []
        }
      ],
      "extensions": [],
      "name": "0985b1d59276ef8ad9c72b443fb99f6f29a27063b05ee885c10aa447"
    },
    {
      "vert": "\n  attribute vec3 a_position;\n\n  uniform mat4 _model;\n  uniform mat4 _viewProj;\n\n  void main () {\n    gl_Position = _viewProj * _model * vec4(a_position, 1);\n    gl_Position.z -= 0.0001;\n  }\n",
      "frag": "\n  \n\n\n\nvec3 gammaToLinearSpaceRGB(vec3 sRGB) { \n  return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n}\n\nvec3 linearToGammaSpaceRGB(vec3 RGB) { \n  vec3 S1 = sqrt(RGB);\n  vec3 S2 = sqrt(S1);\n  vec3 S3 = sqrt(S2);\n  return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\n\nvec4 gammaToLinearSpaceRGBA(vec4 sRGBA) {\n  return vec4(gammaToLinearSpaceRGB(sRGBA.rgb), sRGBA.a);\n}\n\nvec4 linearToGammaSpaceRGBA(vec4 RGBA) {\n  return vec4(linearToGammaSpaceRGB(RGBA.rgb), RGBA.a);\n}\n\n\nfloat gammaToLinearSpaceExact(float val) {\n  if (val <= 0.04045) {\n    return val / 12.92;\n  } else if (val < 1.0) {\n    return pow((val + 0.055) / 1.055, 2.4);\n  } else {\n    return pow(val, 2.2);\n  }\n}\n\nfloat linearToGammaSpaceExact(float val) {\n  if (val <= 0.0) {\n    return 0.0;\n  } else if (val <= 0.0031308) {\n    return 12.92 * val;\n  } else if (val < 1.0) {\n    return 1.055 * pow(val, 0.4166667) - 0.055;\n  } else {\n    return pow(val, 0.45454545);\n  }\n}\n  uniform vec4 color;\n  vec4 front() {\n    return linearToGammaSpaceRGBA(color);\n  }\n  vec4 back() {\n    return linearToGammaSpaceRGBA(vec4(color.rgb, color.a * 0.2));\n  }\n\nvoid main() { gl_FragColor = back(); }\n",
      "defines": [],
      "uniforms": [
        {
          "name": "color",
          "type": 7,
          "defines": []
        }
      ],
      "attributes": [
        {
          "name": "a_position",
          "type": 6,
          "defines": []
        }
      ],
      "extensions": [],
      "name": "31918aa8e10902a035c120cf28c5ec6445b59c7378225fbb72e7e242"
    }
  ]
}