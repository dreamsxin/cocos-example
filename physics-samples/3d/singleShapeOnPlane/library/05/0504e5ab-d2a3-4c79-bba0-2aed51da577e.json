{
  "__type__": "cc.EffectAsset",
  "_name": "builtin-effect-phong",
  "_objFlags": 0,
  "_native": "",
  "techniques": [
    {
      "queue": 0,
      "lod": 200,
      "passes": [
        {
          "stage": 2,
          "cullMode": 1029,
          "depthTest": true,
          "depthWrite": true,
          "program": "bf4ab1d67979b8c4e09cece81bf2056b1c78f06e364f28a636023909"
        },
        {
          "stage": 4,
          "cullMode": 1029,
          "depthTest": true,
          "depthWrite": true,
          "program": "81c5df70cfe5dbdf610be1720c37d54f5081aad5fb15b296b203fdb8"
        }
      ],
      "priority": 0
    }
  ],
  "properties": {
    "diffuseColor": {
      "type": 9,
      "value": [
        0.3,
        0.3,
        0.3,
        1
      ]
    },
    "mainTiling": {
      "type": 5,
      "value": [
        1,
        1
      ]
    },
    "mainOffset": {
      "type": 5,
      "value": [
        0,
        0
      ]
    },
    "diffuse_texture": {
      "type": 13,
      "value": null
    },
    "specularColor": {
      "type": 8,
      "value": [
        0,
        0,
        0
      ]
    },
    "specular_texture": {
      "type": 13,
      "value": null
    },
    "emissiveColor": {
      "type": 8,
      "value": [
        0,
        0,
        0
      ]
    },
    "emissive_texture": {
      "type": 13,
      "value": null
    },
    "glossiness": {
      "type": 4,
      "value": 10
    },
    "normal_texture": {
      "type": 13,
      "value": null
    },
    "alphaTestThreshold": {
      "type": 4,
      "value": 0
    }
  },
  "shaders": [
    {
      "vert": "\n\nattribute vec3 a_position;\nattribute vec3 a_normal;\n\nuniform mat4 _model;\nuniform mat4 _viewProj;\nuniform mat3 _normalMatrix;\n\nvarying vec3 normal_w;\nvarying vec3 pos_w;\n\n#if USE_DIFFUSE_TEXTURE || USE_NORMAL_TEXTURE || USE_EMISSIVE_TEXTURE\n  attribute vec2 a_uv0;\n  uniform vec2 mainTiling;\n  uniform vec2 mainOffset;\n  varying vec2 uv0;\n#endif\n\n#if _USE_SKINNING\n  \n\nattribute vec4 a_weights;\nattribute vec4 a_joints;\n\n#if _USE_JOINTS_TEXTURE\nuniform sampler2D _u_jointsTexture;\nuniform float _u_jointsTextureSize;\n\nmat4 getBoneMatrix(const in float i) {\n  float size = _u_jointsTextureSize;\n  float j = i * 4.0;\n  float x = mod(j, size);\n  float y = floor(j / size);\n\n  float dx = 1.0 / size;\n  float dy = 1.0 / size;\n\n  y = dy * (y + 0.5);\n\n  vec4 v1 = texture2D(_u_jointsTexture, vec2(dx * (x + 0.5), y));\n  vec4 v2 = texture2D(_u_jointsTexture, vec2(dx * (x + 1.5), y));\n  vec4 v3 = texture2D(_u_jointsTexture, vec2(dx * (x + 2.5), y));\n  vec4 v4 = texture2D(_u_jointsTexture, vec2(dx * (x + 3.5), y));\n\n  return mat4(v1, v2, v3, v4);\n}\n#else\nuniform mat4 _u_jointMatrices[128];\n\nmat4 getBoneMatrix(const in float i) {\n  return _u_jointMatrices[int(i)];\n}\n#endif\n\nmat4 skinMatrix() {\n  return\n    getBoneMatrix(a_joints.x) * a_weights.x +\n    getBoneMatrix(a_joints.y) * a_weights.y +\n    getBoneMatrix(a_joints.z) * a_weights.z +\n    getBoneMatrix(a_joints.w) * a_weights.w\n    ;\n}\n\nvoid skinVertex(inout vec4 a1) {\n  mat4 m = skinMatrix();\n  a1 = m * a1;\n}\n\nvoid skinVertex(inout vec4 a1, inout vec4 a2) {\n  mat4 m = skinMatrix();\n  a1 = m * a1;\n  a2 = m * a2;\n}\n\nvoid skinVertex(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  mat4 m = skinMatrix();\n  a1 = m * a1;\n  a2 = m * a2;\n  a3 = m * a3;\n}\n\n#endif\n\n#if _USE_SHADOW_MAP\n  \n\n#if _NUM_SHADOW_LIGHTS > 0\n  #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n    uniform mat4 _lightViewProjMatrix_{id};\n    uniform float _minDepth_{id};\n    uniform float _maxDepth_{id};\n    varying vec4 pos_lightspace_{id};\n    varying float vDepth_{id};\n  #pragma endFor\n#endif\n\nvoid prepareShadowData(vec3 pos_w) {\n  #if _NUM_SHADOW_LIGHTS > 0\n    #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n      pos_lightspace_{id} = _lightViewProjMatrix_{id} * vec4(pos_w, 1.0);\n      vDepth_{id} = (pos_lightspace_{id}.z + _minDepth_{id}) / (_minDepth_{id} + _maxDepth_{id});\n    #pragma endFor\n  #endif\n}\n\n#endif\n\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  vec4 normal = vec4(a_normal, 0);\n\n  #if _USE_SKINNING\n    skinVertex(pos, normal);\n  #endif\n\n  pos_w = (_model * pos).xyz;\n  pos = _viewProj * _model * pos;\n  normal_w = _normalMatrix * normal.xyz;\n\n  #if _USE_SHADOW_MAP\n    prepareShadowData(pos_w);\n  #endif\n\n  #if USE_DIFFUSE_TEXTURE || USE_NORMAL_TEXTURE || USE_EMISSIVE_TEXTURE\n    uv0 = a_uv0 * mainTiling + mainOffset;\n  #endif\n\n  return pos;\n}\n\nvoid main() { gl_Position = vert(); }\n",
      "frag": "\n\n#if USE_NORMAL_TEXTURE\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n\n\n\n\n\n#define PI 3.14159265359\n#define PI2 6.28318530718\n#define EPSILON 1e-6\n#define LOG2 1.442695\n\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n\n\n\n\nvec3 gammaToLinearSpaceRGB(vec3 sRGB) { \n  return sRGB * (sRGB * (sRGB * 0.305306011 + 0.682171111) + 0.012522878);\n}\n\nvec3 linearToGammaSpaceRGB(vec3 RGB) { \n  vec3 S1 = sqrt(RGB);\n  vec3 S2 = sqrt(S1);\n  vec3 S3 = sqrt(S2);\n  return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\n\nvec4 gammaToLinearSpaceRGBA(vec4 sRGBA) {\n  return vec4(gammaToLinearSpaceRGB(sRGBA.rgb), sRGBA.a);\n}\n\nvec4 linearToGammaSpaceRGBA(vec4 RGBA) {\n  return vec4(linearToGammaSpaceRGB(RGBA.rgb), RGBA.a);\n}\n\n\nfloat gammaToLinearSpaceExact(float val) {\n  if (val <= 0.04045) {\n    return val / 12.92;\n  } else if (val < 1.0) {\n    return pow((val + 0.055) / 1.055, 2.4);\n  } else {\n    return pow(val, 2.2);\n  }\n}\n\nfloat linearToGammaSpaceExact(float val) {\n  if (val <= 0.0) {\n    return 0.0;\n  } else if (val <= 0.0031308) {\n    return 12.92 * val;\n  } else if (val < 1.0) {\n    return 1.055 * pow(val, 0.4166667) - 0.055;\n  } else {\n    return pow(val, 0.45454545);\n  }\n}\n\nstruct LightInfo {\n  vec3 diffuse;\n  vec3 specular;\n};\n\nLightInfo computeDirectionalLighting(\n  vec3 lightDirection,\n  vec3 lightColor,\n  vec3 normal,\n  vec3 viewDirection,\n  float glossiness\n) {\n  LightInfo lightingResult;\n  float ndl = 0.0;\n  float ndh = 0.0;\n  vec3 lightDir = -normalize(lightDirection);\n  ndl = max(0.0, dot(normal, lightDir));\n  lightingResult.diffuse = lightColor * ndl;\n\n  vec3 dirH = normalize(viewDirection + lightDir);\n  ndh = max(0.0, dot(normal, dirH));\n  ndh = (ndl == 0.0) ? 0.0: ndh;\n  ndh = pow(ndh, max(1.0, glossiness * 128.0));\n  lightingResult.specular = lightColor * ndh;\n\n  return lightingResult;\n}\n\nLightInfo computePointLighting(\n  vec3 lightPosition,\n  vec3 lightColor,\n  float lightRange,\n  vec3 normal,\n  vec3 positionW,\n  vec3 viewDirection,\n  float glossiness\n) {\n  LightInfo lightingResult;\n  float ndl = 0.0;\n  float ndh = 0.0;\n  vec3 lightDir = vec3(0, 0, 0);\n  float attenuation = 1.0;\n  lightDir = lightPosition - positionW;\n  attenuation = max(0., 1.0 - length(lightDir) / lightRange);\n  lightDir = normalize(lightDir);\n  ndl = max(0.0, dot(normal, lightDir));\n  lightingResult.diffuse = lightColor * ndl * attenuation;\n\n  vec3 dirH = normalize(viewDirection + lightDir);\n  ndh = max(0.0, dot(normal, dirH));\n  ndh = (ndl == 0.0) ? 0.0: ndh;\n  ndh = pow(ndh, max(1.0, glossiness * 128.0));\n  lightingResult.specular = lightColor * ndh * attenuation;\n\n  return lightingResult;\n}\n\nLightInfo computeSpotLighting(\n  vec3 lightPosition,\n  vec3 lightDirection,\n  vec3 lightColor,\n  float lightRange,\n  vec2 lightSpot,\n  vec3 normal,\n  vec3 positionW,\n  vec3 viewDirection,\n  float glossiness\n) {\n  LightInfo lightingResult;\n  float ndl = 0.0;\n  float ndh = 0.0;\n  vec3 lightDir = vec3(0, 0, 0);\n  float attenuation = 1.0;\n  float cosConeAngle = 1.0;\n\n  lightDir = lightPosition - positionW;\n  attenuation = max(0., 1.0 - length(lightDir) / lightRange);\n  lightDir = normalize(lightDir);\n  cosConeAngle = max(0., dot(lightDirection, -lightDir));\n  cosConeAngle = cosConeAngle < lightSpot.x ? 0.0 : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle,lightSpot.y);\n  ndl = max(0.0, dot(normal, lightDir));\n  lightingResult.diffuse = lightColor * ndl * attenuation * cosConeAngle;\n\n  vec3 dirH = normalize(viewDirection + lightDir);\n  ndh = max(0.0, dot(normal, dirH));\n  ndh = (ndl == 0.0) ? 0.0: ndh;\n  ndh = pow(ndh, max(1.0, glossiness * 128.0));\n  lightingResult.specular = lightColor * ndh * attenuation * cosConeAngle;\n\n  return lightingResult;\n}\n\n#if _NUM_DIR_LIGHTS > 0\n  #pragma for id in range(0, _NUM_DIR_LIGHTS)\n    uniform vec3 _dir_light{id}_direction;\n    uniform vec3 _dir_light{id}_color;\n  #pragma endFor\n#endif\n\n#if _NUM_POINT_LIGHTS > 0\n  #pragma for id in range(0, _NUM_POINT_LIGHTS)\n    uniform vec3 _point_light{id}_position;\n    uniform vec3 _point_light{id}_color;\n    uniform float _point_light{id}_range;\n  #pragma endFor\n#endif\n\n#if _NUM_SPOT_LIGHTS > 0\n  #pragma for id in range(0, _NUM_SPOT_LIGHTS)\n    uniform vec3 _spot_light{id}_position;\n    uniform vec3 _spot_light{id}_direction;\n    uniform vec3 _spot_light{id}_color;\n    uniform float _spot_light{id}_range;\n    uniform vec2 _spot_light{id}_spot;\n  #pragma endFor\n#endif\n\nLightInfo getPhongLighting(\n  vec3 normal,\n  vec3 positionW,\n  vec3 viewDirection,\n  float glossiness\n) {\n  LightInfo result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  LightInfo dirLighting;\n  #if _NUM_DIR_LIGHTS > 0\n    #pragma for id in range(0, _NUM_DIR_LIGHTS)\n      dirLighting = computeDirectionalLighting(_dir_light{id}_direction,_dir_light{id}_color,normal, viewDirection, glossiness);\n      result.diffuse += dirLighting.diffuse;\n      result.specular += dirLighting.specular;\n    #pragma endFor\n  #endif\n\n  LightInfo pointLighting;\n  #if _NUM_POINT_LIGHTS > 0\n    #pragma for id in range(0, _NUM_POINT_LIGHTS)\n      pointLighting = computePointLighting(_point_light{id}_position, _point_light{id}_color, _point_light{id}_range,\n                                          normal, positionW, viewDirection, glossiness);\n      result.diffuse += pointLighting.diffuse;\n      result.specular += pointLighting.specular;\n    #pragma endFor\n  #endif\n\n  LightInfo spotLighting;\n  #if _NUM_SPOT_LIGHTS > 0\n    #pragma for id in range(0, _NUM_SPOT_LIGHTS)\n      spotLighting = computeSpotLighting(_spot_light{id}_position, _spot_light{id}_direction, _spot_light{id}_color,\n                      _spot_light{id}_range, _spot_light{id}_spot,normal, positionW, viewDirection, glossiness);\n      result.diffuse += spotLighting.diffuse;\n      result.specular += spotLighting.specular;\n    #pragma endFor\n  #endif\n  return result;\n}\n\n#if _USE_SHADOW_MAP\n  \n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n  \n\n#if _NUM_SHADOW_LIGHTS > 0\n  #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n    uniform sampler2D _shadowMap_{id};\n    uniform float _darkness_{id};\n    uniform float _depthScale_{id};\n    uniform float _frustumEdgeFalloff_{id};\n    uniform float _bias_{id};\n    uniform vec2 _texelSize_{id};\n    varying vec4 pos_lightspace_{id};\n    varying float vDepth_{id};\n  #pragma endFor\n#endif\n\nfloat computeShadow(sampler2D shadowMap, vec4 pos_lightspace, float _bias) {\n  vec3 projCoords = pos_lightspace.xyz / pos_lightspace.w;\n  projCoords = projCoords * 0.5 + 0.5;\n  float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, projCoords.xy));\n  float currentDepth = projCoords.z;\n  float shadow = (currentDepth - _bias > closestDepth) ? 0.0 : 1.0;\n  return shadow;\n}\n\nfloat computeFallOff(float esm, vec2 coords, float frustumEdgeFalloff) {\n  float mask = smoothstep(1.0 - frustumEdgeFalloff, 1.0, clamp(dot(coords, coords), 0.0, 1.0));\n  return mix(esm, 1.0, mask);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfloat computeShadowESM(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float depthScale, float darkness, float frustumEdgeFalloff) {\n  vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n  vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n  if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n    return 1.0;\n  }\n  float currentDepth = clamp(vDepth, 0.0, 1.0);\n  float closestDepth = unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n  \n  float esm = clamp(exp(-depthScale * (currentDepth - closestDepth)), 1.0 - darkness, 1.0);\n  return computeFallOff(esm, projCoords, frustumEdgeFalloff);\n}\n\nfloat computeShadowPCF(sampler2D shadowMap, vec4 pos_lightspace, float vDepth, float darkness, vec2 texelSize, float frustumEdgeFalloff) {\n  vec2 projCoords = pos_lightspace.xy / pos_lightspace.w;\n  vec2 shadowUV = projCoords * 0.5 + vec2(0.5);\n  if (shadowUV.x < 0.0 || shadowUV.x > 1.0 || shadowUV.y < 0.0 || shadowUV.y > 1.0) {\n    return 1.0;\n  }\n  float currentDepth = clamp(vDepth, 0.0, 1.0);\n  float visibility = 1.0;\n  vec2 poissonDisk[4];\n  poissonDisk[0] = vec2(-0.94201624, -0.39906216);\n  poissonDisk[1] = vec2(0.94558609, -0.76890725);\n  poissonDisk[2] = vec2(-0.094184101, -0.92938870);\n  poissonDisk[3] = vec2(0.34495938, 0.29387760);\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[0] * texelSize)) < currentDepth) visibility -= 0.25;\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[1] * texelSize)) < currentDepth) visibility -= 0.25;\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[2] * texelSize)) < currentDepth) visibility -= 0.25;\n  if (unpackRGBAToDepth(texture2D(shadowMap, shadowUV + poissonDisk[3] * texelSize)) < currentDepth) visibility -= 0.25;\n\n  return computeFallOff(min(1.0, visibility + 1.0 - darkness), projCoords, frustumEdgeFalloff);\n}\n\nfloat computeShadow() {\n  float shadow = 1.0;\n  #if _NUM_SHADOW_LIGHTS > 0\n    #pragma for id in range(0, _NUM_SHADOW_LIGHTS)\n      shadow *= computeShadowESM(_shadowMap_{id}, pos_lightspace_{id}, vDepth_{id}, _depthScale_{id}, _darkness_{id}, _frustumEdgeFalloff_{id});\n    #pragma endFor\n  #endif\n  return shadow;\n}\n\n#endif\n\nuniform vec3 _eye;\nuniform vec3 _sceneAmbient;\n\nvarying vec3 normal_w;\nvarying vec3 pos_w;\n\n#if USE_DIFFUSE_TEXTURE || USE_NORMAL_TEXTURE || USE_EMISSIVE_TEXTURE\n  varying vec2 uv0;\n#endif\n\nstruct phongMaterial\n{\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float glossiness;\n  float opacity;\n};\n\nuniform vec4 diffuseColor;\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuse_texture;\n#endif\n\n#if USE_EMISSIVE\n  uniform vec3 emissiveColor;\n  #if USE_EMISSIVE_TEXTURE\n    uniform sampler2D emissive_texture;\n  #endif\n#endif\n\n#if USE_SPECULAR\n  uniform vec3 specularColor;\n  uniform float glossiness;\n  #if USE_SPECULAR_TEXTURE\n    uniform sampler2D specular_texture;\n  #endif\n#endif\n\n#if USE_NORMAL_TEXTURE\n  uniform sampler2D normal_texture;\n  uniform float normalScale;  \n  vec3 getNormal(vec3 pos, vec3 normal) {\n    vec3 q0 = vec3( dFdx( pos.x ), dFdx( pos.y ), dFdx( pos.z ) );\n    vec3 q1 = vec3( dFdy( pos.x ), dFdy( pos.y ), dFdy( pos.z ) );\n    vec2 st0 = dFdx( uv0.st );\n    vec2 st1 = dFdy( uv0.st );\n    vec3 S = normalize( q0 * st1.t - q1 * st0.t );\n    vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n    vec3 N = normal;\n    vec3 mapN = texture2D(normal_texture, uv0).rgb * 2.0 - 1.0;\n    mapN.xy = 1.0 * mapN.xy;\n    mat3 tsn = mat3( S, T, N );\n    return normalize( tsn * mapN );\n  }\n#endif\n\n#if USE_ALPHA_TEST\n  uniform float alphaTestThreshold;\n#endif\n\nphongMaterial getPhongMaterial() {\n  phongMaterial result;\n\n  #if USE_DIFFUSE_TEXTURE\n    vec4 baseColor = diffuseColor * gammaToLinearSpaceRGBA(texture2D(diffuse_texture, uv0));\n    result.diffuse = baseColor.rgb;\n    result.opacity = baseColor.a;\n  #else\n    result.diffuse = diffuseColor.rgb;\n    result.opacity = diffuseColor.a;\n  #endif\n\n  #if USE_EMISSIVE\n    result.emissive = emissiveColor;\n    #if USE_EMISSIVE_TEXTURE\n      result.emissive *= gammaToLinearSpaceRGB(texture2D(emissive_texture, uv0).rgb);\n    #endif\n  #endif\n\n  #if USE_SPECULAR\n    result.specular = specularColor;\n    #if USE_SPECULAR_TEXTURE\n      result.specular = gammaToLinearSpaceRGB(texture2D(specular_texture, uv0).rgb);\n    #endif\n\n    result.glossiness = glossiness;\n  #endif\n\n  return result;\n}\n\nvec4 composePhongShading(LightInfo lighting, phongMaterial mtl, float shadow)\n{\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n\n  \n  o.xyz = lighting.diffuse * mtl.diffuse;\n  #if USE_EMISSIVE\n    o.xyz += mtl.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.xyz += lighting.specular * mtl.specular;\n  #endif\n  o.xyz *= shadow;\n  o.w = mtl.opacity;\n\n  return o;\n}\n\nvec4 frag () {\n  LightInfo phongLighting;\n  vec3 viewDirection = normalize(_eye - pos_w);\n\n  phongMaterial mtl = getPhongMaterial();\n  #if USE_ALPHA_TEST\n    if(mtl.opacity < alphaTestThreshold) discard;\n  #endif\n  vec3 normal = normalize(normal_w);\n  #if USE_NORMAL_TEXTURE\n    normal = getNormal(pos_w, normal);\n  #endif\n  phongLighting = getPhongLighting(normal, pos_w, viewDirection, mtl.glossiness);\n  phongLighting.diffuse += _sceneAmbient;\n\n  #if _USE_SHADOW_MAP\n    vec4 finalColor = composePhongShading(phongLighting, mtl, computeShadow());\n  #else\n    vec4 finalColor = composePhongShading(phongLighting, mtl, 1.0);\n  #endif\n\n  return linearToGammaSpaceRGBA(finalColor);\n}\n\nvoid main() { gl_FragColor = frag(); }\n",
      "defines": [
        {
          "name": "USE_DIFFUSE_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "_USE_SKINNING",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "_USE_JOINTS_TEXTURE",
          "type": "boolean",
          "defines": [
            "_USE_SKINNING"
          ]
        },
        {
          "name": "_USE_SHADOW_MAP",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "_NUM_SHADOW_LIGHTS",
          "type": "number",
          "defines": [
            "_USE_SHADOW_MAP"
          ]
        },
        {
          "name": "USE_NORMAL_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "_NUM_DIR_LIGHTS",
          "type": "number",
          "defines": []
        },
        {
          "name": "_NUM_POINT_LIGHTS",
          "type": "number",
          "defines": []
        },
        {
          "name": "_NUM_SPOT_LIGHTS",
          "type": "number",
          "defines": []
        },
        {
          "name": "USE_EMISSIVE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_EMISSIVE_TEXTURE",
          "type": "boolean",
          "defines": [
            "USE_EMISSIVE"
          ]
        },
        {
          "name": "USE_SPECULAR",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_SPECULAR_TEXTURE",
          "type": "boolean",
          "defines": [
            "USE_SPECULAR"
          ]
        },
        {
          "name": "USE_ALPHA_TEST",
          "type": "boolean",
          "defines": []
        }
      ],
      "uniforms": [
        {
          "name": "mainTiling",
          "type": 5,
          "defines": []
        },
        {
          "name": "mainOffset",
          "type": 5,
          "defines": []
        },
        {
          "name": "diffuseColor",
          "type": 7,
          "defines": []
        },
        {
          "name": "diffuse_texture",
          "type": 13,
          "defines": [
            "USE_DIFFUSE_TEXTURE"
          ]
        },
        {
          "name": "emissiveColor",
          "type": 6,
          "defines": [
            "USE_EMISSIVE"
          ]
        },
        {
          "name": "emissive_texture",
          "type": 13,
          "defines": [
            "USE_EMISSIVE",
            "USE_EMISSIVE_TEXTURE"
          ]
        },
        {
          "name": "specularColor",
          "type": 6,
          "defines": [
            "USE_SPECULAR"
          ]
        },
        {
          "name": "glossiness",
          "type": 4,
          "defines": [
            "USE_SPECULAR"
          ]
        },
        {
          "name": "specular_texture",
          "type": 13,
          "defines": [
            "USE_SPECULAR",
            "USE_SPECULAR_TEXTURE"
          ]
        },
        {
          "name": "normal_texture",
          "type": 13,
          "defines": [
            "USE_NORMAL_TEXTURE"
          ]
        },
        {
          "name": "normalScale",
          "type": 4,
          "defines": [
            "USE_NORMAL_TEXTURE"
          ]
        },
        {
          "name": "alphaTestThreshold",
          "type": 4,
          "defines": [
            "USE_ALPHA_TEST"
          ]
        }
      ],
      "attributes": [
        {
          "name": "a_position",
          "type": 6,
          "defines": []
        },
        {
          "name": "a_normal",
          "type": 6,
          "defines": []
        },
        {
          "name": "a_uv0",
          "type": 5,
          "defines": []
        },
        {
          "name": "a_weights",
          "type": 7,
          "defines": [
            "_USE_SKINNING"
          ]
        },
        {
          "name": "a_joints",
          "type": 7,
          "defines": [
            "_USE_SKINNING"
          ]
        }
      ],
      "extensions": [
        {
          "name": "OES_standard_derivatives",
          "define": "USE_NORMAL_TEXTURE"
        }
      ],
      "name": "bf4ab1d67979b8c4e09cece81bf2056b1c78f06e364f28a636023909"
    },
    {
      "vert": "\n\nattribute vec3 a_position;\n\nuniform mat4 _model;\nuniform mat4 _lightViewProjMatrix;\nuniform float _minDepth;\nuniform float _maxDepth;\nuniform float _bias;\nvarying float vDepth;\n\n#if _USE_SKINNING\n  \n\nattribute vec4 a_weights;\nattribute vec4 a_joints;\n\n#if _USE_JOINTS_TEXTURE\nuniform sampler2D _u_jointsTexture;\nuniform float _u_jointsTextureSize;\n\nmat4 getBoneMatrix(const in float i) {\n  float size = _u_jointsTextureSize;\n  float j = i * 4.0;\n  float x = mod(j, size);\n  float y = floor(j / size);\n\n  float dx = 1.0 / size;\n  float dy = 1.0 / size;\n\n  y = dy * (y + 0.5);\n\n  vec4 v1 = texture2D(_u_jointsTexture, vec2(dx * (x + 0.5), y));\n  vec4 v2 = texture2D(_u_jointsTexture, vec2(dx * (x + 1.5), y));\n  vec4 v3 = texture2D(_u_jointsTexture, vec2(dx * (x + 2.5), y));\n  vec4 v4 = texture2D(_u_jointsTexture, vec2(dx * (x + 3.5), y));\n\n  return mat4(v1, v2, v3, v4);\n}\n#else\nuniform mat4 _u_jointMatrices[128];\n\nmat4 getBoneMatrix(const in float i) {\n  return _u_jointMatrices[int(i)];\n}\n#endif\n\nmat4 skinMatrix() {\n  return\n    getBoneMatrix(a_joints.x) * a_weights.x +\n    getBoneMatrix(a_joints.y) * a_weights.y +\n    getBoneMatrix(a_joints.z) * a_weights.z +\n    getBoneMatrix(a_joints.w) * a_weights.w\n    ;\n}\n\nvoid skinVertex(inout vec4 a1) {\n  mat4 m = skinMatrix();\n  a1 = m * a1;\n}\n\nvoid skinVertex(inout vec4 a1, inout vec4 a2) {\n  mat4 m = skinMatrix();\n  a1 = m * a1;\n  a2 = m * a2;\n}\n\nvoid skinVertex(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  mat4 m = skinMatrix();\n  a1 = m * a1;\n  a2 = m * a2;\n  a3 = m * a3;\n}\n\n#endif\n\nvec4 vert() {\n  vec4 pos = vec4(a_position, 1);\n\n  #if _USE_SKINNING\n    mat4 skinMat = skinMatrix();\n    pos = skinMat * pos;\n  #endif\n\n  \n  vDepth = ((gl_Position.z + _minDepth) / (_minDepth + _maxDepth)) + _bias;\n  return _lightViewProjMatrix * _model * pos;\n}\n\nvoid main() { gl_Position = vert(); }\n",
      "frag": "\n\nuniform float _depthScale;\nvarying float vDepth;\n\n\n\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\n\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\n\nvec4 frag() {\n  \n  \n  return packDepthToRGBA(vDepth);\n  \n  \n}\n\nvoid main() { gl_FragColor = frag(); }\n",
      "defines": [
        {
          "name": "_USE_SKINNING",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "_USE_JOINTS_TEXTURE",
          "type": "boolean",
          "defines": [
            "_USE_SKINNING"
          ]
        }
      ],
      "uniforms": [],
      "attributes": [
        {
          "name": "a_position",
          "type": 6,
          "defines": []
        },
        {
          "name": "a_weights",
          "type": 7,
          "defines": [
            "_USE_SKINNING"
          ]
        },
        {
          "name": "a_joints",
          "type": 7,
          "defines": [
            "_USE_SKINNING"
          ]
        }
      ],
      "extensions": [],
      "name": "81c5df70cfe5dbdf610be1720c37d54f5081aad5fb15b296b203fdb8"
    }
  ]
}