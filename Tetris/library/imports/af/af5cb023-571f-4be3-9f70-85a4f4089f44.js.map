{"version":3,"sources":["../../../../assets/script/assets/script/render.ts"],"names":[],"mappings":";;;;;AAAA,mCAAiC;AAG3B,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAyB,CAAA;AAGzC;IAAoC,0BAAY;IADhD;QAAA,qEAiDC;QA7CG,UAAI,GAAc,SAAS,CAAA;QAG3B,sBAAgB,GAAqB,EAAE,CAAA;QAEvC,0BAA0B;QAC1B,eAAS,GAAgB,EAAE,CAAA;;IAuC/B,CAAC;IArCG,uBAAM,GAAN;QACI,IAAI,CAAC,IAAI,EAAE,CAAA;IACf,CAAC;IAED,qBAAI,GAAJ;QACI,IAAM,MAAM,GAAG,eAAM,CAAC,GAAG,GAAG,eAAM,CAAC,WAAW,CAAA;QAC9C,IAAM,KAAK,GAAG,eAAM,CAAC,GAAG,GAAG,eAAM,CAAC,UAAU,CAAA;QAC5C,UAAU;QACV,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAM,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;YACjC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAA;YACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAM,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;gBACjC,IAAM,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,GAAG,eAAM,CAAC,UAAU,GAAG,CAAC,GAAG,CAAC,GAAG,eAAM,CAAC,UAAU,CAAA;gBACpE,IAAM,CAAC,GAAG,MAAM,GAAG,CAAC,GAAG,eAAM,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,GAAG,eAAM,CAAC,WAAW,CAAA;gBACtE,IAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;gBAClC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;aAC9B;SACJ;IACL,CAAC;IAED,mBAAmB;IACnB,uBAAM,GAAN,UAAQ,SAAwB;QAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAM,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;YACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAM,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE;gBACjC,IAAM,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;gBAC7B,oBAAoB;gBACpB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,GAAG,CAAC,CAAC,CAAA;aAC9F;SACJ;IACL,CAAC;IAED,2BAAU,GAAV,UAAY,CAAS,EAAE,CAAS;QAC5B,IAAI,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACpC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;QACxB,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACtB,IAAI,CAAC,cAAc,CAAC,eAAM,CAAC,SAAS,EAAE,eAAM,CAAC,UAAU,CAAC,CAAA;QACxD,OAAO,IAAI,CAAA;IACf,CAAC;IA5CD;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;wCACO;IAG3B;QADC,QAAQ,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;oDACY;IANtB,MAAM;QAD1B,OAAO;OACa,MAAM,CAgD1B;IAAD,aAAC;CAhDD,AAgDC,CAhDmC,EAAE,CAAC,SAAS,GAgD/C;kBAhDoB,MAAM","file":"","sourceRoot":"../../../../assets/script","sourcesContent":["import { config } from \"./config\"\nimport { ItemColor } from \"./enum\"\n\nconst {ccclass, property} = cc._decorator\n\n@ccclass\nexport default class Render extends cc.Component {\n\n    @property(cc.Prefab)\n    item: cc.Prefab = undefined\n\n    @property([cc.SpriteFrame])\n    itemSpriteFrames: cc.SpriteFrame[] = []\n\n    /** 游戏层上应该铺满节点，然后根据数据渲染 */\n    itemArray: cc.Node[][] = []\n\n    onLoad () {\n        this.init()\n    }\n\n    init () {\n        const height = config.row * config.blockHeight\n        const width = config.col * config.blockWidth\n        // 初始化所有节点\n        for (let i = 0; i < config.row; i++) {\n            this.itemArray[i] = []\n            for (let j = 0; j < config.col; j++) {\n                const x = -width / 2 + config.blockWidth / 2 + j * config.blockWidth\n                const y = height / 2 - config.blockHeight / 2 - i * config.blockHeight\n                const item = this.createItem(x, y)\n                this.itemArray[i][j] = item\n            }\n        }\n    }\n\n    /** 根据传入二维数组进行渲染 */\n    render (dataArray: ItemColor[][]) {\n        for (let i = 0; i < config.row; i++) {\n            for (let j = 0; j < config.col; j++) {\n                const color = dataArray[i][j]\n                // 拖入图片 0-6，颜色枚举 1-7\n                this.itemArray[i][j].getComponent(cc.Sprite).spriteFrame = this.itemSpriteFrames[color - 1]\n            }\n        }\n    }\n\n    createItem (x: number, y: number): cc.Node {\n        let item = cc.instantiate(this.item)\n        this.node.addChild(item)\n        item.setPosition(x, y)\n        item.setContentSize(config.itemWidth, config.itemHeight)\n        return item\n    }\n}\n"]}