{"version":3,"sources":["../../../../assets/scripts/assets/scripts/Screenshot.js"],"names":["cc","Class","extends","Component","properties","onLoad","screenshotNative","fileName","type","callback","size","director","getWinSize","fullPath","jsb","fileUtils","getWritablePath","console","log","isFileExist","removeFile","w","Math","floor","width","texture","RenderTexture","height","Texture2D","PIXEL_FORMAT_RGBA4444","gl","DEPTH24_STENCIL8_OES","setPosition","p","begin","getRunningScene","visit","end","saveToFile","ImageFormat","PNG","loadImg","screenshotWebGL","self","on","Director","EVENT_AFTER_DRAW","canvas","document","getElementById","grab","x","y","arrayBuffer","Uint8Array","game","_renderContext","readPixels","RGBA","UNSIGNED_BYTE","newBuffer","i","j","k","clampArray","Uint8ClampedArray","length","imageData","ImageData","tempCanvas","createElement","getContext","putImageData","newBase64","toDataURL","base64ToSpriteFrame","frame","off","screenshotCanvas","getImageData","base64","cutPicture","data","rect","SpriteFrame","setRect","img","Image","src","onload","initWithElement","handleLoadedTexture","newframe","scheduleOnce","loader","load","err","tex","spriteFrame","Rect"],"mappings":"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","file":"Screenshot.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n\n    },\n\n    onLoad() { },\n\n    /**\n     * 适用于win android ios\n     * @param {*} fileName \n     * @param {*} type \n     * @param {*} callback \n     */\n    screenshotNative(fileName = 'shot.png', type, callback) {\n        var size = cc.director.getWinSize();\n        var fullPath = jsb.fileUtils.getWritablePath() + fileName;\n        console.log('fullPath=', fullPath);\n        if (jsb.fileUtils.isFileExist(fullPath)) {\n            console.log('remove');\n            jsb.fileUtils.removeFile(fullPath);\n        }\n\n        var w = (Math.floor(size.width) / 1920 ) * 1640\n\n        //方式1\n        var texture = new cc.RenderTexture(Math.floor(w), Math.floor(size.height));\n        //方式2\n        if (type == 'high') {\n            //如果要图片高质量 可以使用cc.Texture2D.PIXEL_FORMAT_RGBA8888。\n            texture = new cc.RenderTexture(Math.floor(size.width), Math.floor(size.height), cc.Texture2D.PIXEL_FORMAT_RGBA4444, gl.DEPTH24_STENCIL8_OES);\n        }\n        texture.setPosition(cc.p(w / 2, size.height / 2));\n        texture.begin();\n        cc.director.getRunningScene().visit();\n        texture.end();\n        //1.4 之前请用cc.IMAGE_FORMAT_JPG。1.4以后，截屏函数的第二个参数改成了 cc.ImageFormat.PNG\n        texture.saveToFile(fileName, cc.ImageFormat.PNG);\n        this.loadImg(fullPath, callback);\n    },\n\n    /**\n     * 适用于WebGL 与Canvas环境\n     * @param {*} callback \n     */\n    screenshotWebGL(callback) {\n        var self = this;\n        cc.director.on(cc.Director.EVENT_AFTER_DRAW, () => {\n            var canvas = document.getElementById(\"GameCanvas\");\n            // var base64 = canvas.toDataURL(\"imagea/png\");\n\n            function grab(x, y, width, height) {\n                var arrayBuffer = new Uint8Array(width * height * 4);\n\n                cc.game._renderContext.readPixels(x, y, width, height, cc.game._renderContext.RGBA, cc.game._renderContext.UNSIGNED_BYTE, arrayBuffer);\n\n                var newBuffer = new Uint8Array(width * height * 4);\n                for (var i = height - 1; i >= 0; i--){\n                    for (var j = 0 ; j < width; j++){\n                        for (var k = 0; k < 4; k ++) {\n                            newBuffer[((height-1-i)*(width) + j)*4 + k] = arrayBuffer[(i*width  + j)*4 + k];\n                        }\n                    }\n                }\n\n\n                var clampArray = new Uint8ClampedArray(newBuffer, 0, newBuffer.length);\n                var imageData = new ImageData(clampArray, width, height);\n                \n                var tempCanvas = document.createElement('canvas');\n                tempCanvas.width = width;\n                tempCanvas.height = height;\n                tempCanvas.getContext('2d').putImageData(imageData, 0, 0);\n\n                var newBase64 = tempCanvas.toDataURL(\"imagea/png\");\n                \n                self.base64ToSpriteFrame(newBase64, (frame) => {\n                    if (callback) callback(newBase64,frame);\n                })\n                cc.director.off(cc.Director.EVENT_AFTER_DRAW);\n\n            }\n            \n            var w = Math.floor((canvas.width / 1920 ) * 1640)\n            grab(0, 0, w, canvas.height);\n            \n        });\n    },\n\n\n    /**\n     * 只适用Canvas环境\n     * @param {*} callback \n     */\n    screenshotCanvas(callback) {\n        \n        var canvas = document.getElementById(\"GameCanvas\");\n        var w = Math.floor((canvas.width / 1920 ) * 1640)\n        let imageData = canvas.getContext('2d').getImageData(0,0,w, canvas.height)\n        var tempCanvas = document.createElement('canvas');\n        tempCanvas.width = w;\n        tempCanvas.height = canvas.height;\n        tempCanvas.getContext('2d').putImageData(imageData, 0, 0);\n        var base64 = tempCanvas.toDataURL(\"imagea/png\");\n\n        var frame = this.base64ToSpriteFrame(base64, (frame) => {\n            if (callback) callback(base64,frame);\n        });\n        //把图片生成后download到本地\n        // var href = base64.replace(/^data:image[^;]*/, \"data:image/octet-stream\");\n        // document.location.href = href;\n    },\n\n    /**\n     * 切图\n     * @param { cc.SpriteFrame or cc.Texture2D} data \n     * @param {*} rect \n     */\n    cutPicture(data,rect){\n        let frame;\n        if(data instanceof cc.SpriteFrame) {\n            frame=data;\n        }else if(data instanceof cc.Texture2D) {\n            frame = new cc.SpriteFrame(texture);\n        }\n        if(!frame) {\n            return null;\n        }\n        //设置显示区域 ，注意使用cc.Rect()会得到undefinde \n        frame.setRect(rect);\n        return frame;\n    },\n\n    base64ToSpriteFrame(base64, callback) {\n        var img = new Image();\n        img.src = base64;\n        img.onload = function () {\n            var texture = new cc.Texture2D();\n            texture.initWithElement(img);\n            texture.handleLoadedTexture();\n            var newframe = new cc.SpriteFrame(texture);\n            if (callback) callback(newframe);\n        }\n    },\n\n    loadImg(fullPath, callback) {\n        //延时就因为，texture.begin()是到是下一帧才截图完成\n        this.scheduleOnce(() => {\n            cc.loader.load(fullPath, (err, tex) => {\n                let spriteFrame = new cc.SpriteFrame(tex, cc.Rect(0, 0, tex.width, tex.height));\n                if (callback) callback(spriteFrame);\n            });\n        }, 0.01);\n    },\n\n    // update (dt) {},\n});\n"]}